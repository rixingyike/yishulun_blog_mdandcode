[{"id":0,"href":"/posts/2022/miniprogramfrom0to1.html","title":"小程序从0到1说明","section":"Posts","content":"#  "},{"id":1,"href":"/posts/2022/1016.html","title":"使用面向过程和面向对象结合的思想开发软件，而不仅仅是使用面向对象的设计思想","section":"Posts","content":"使用面向过程和面向对象结合的思想开发软件，而不仅仅是使用面向对象的设计思想 #  两者结合起来，开发更有保障。\n什么是面向过程开发？\n面向过程开发也称结构化开发，将软件要实现的功能分解成一个个连续的流程结点，将每个节点都实现为一个函数，依次调用这些函数以完成软件功能。至于执行流程中多个函数共用的数据，则拿出来定义为共享的数据结构，实例化，在函数中使用和传递。\n什么是面向对象开发？\n面向对象开发主要指模拟人类的思维方式，将软件需求中的事物关系，通过封装、继承、多态等手法抽象为一个个具体的对象（类），在对象中包含数据和操作数据的方法，以此方式实现软件需求。对象与对象之间的通讯，主要以发送信息的方式进行。\n面向过程开发有什么缺点，为什么会产生面向对象的开发思想？\n面向过程开发很适合处理不包含多层数据结构的流式信息处理、生产流程控制等扁平式产品需求，对于内部关系复杂的软件需求，这种开发方式将捉襟见肘。举个例子，像那种定制 CSS 样式的参数设置界面，使用面向过程的思想便不易设计。20 世纪 80 年代，在图形化桌面系统诞生以后，图形化桌面软件也开始蓬勃发展，你很难想象，对于像 Excel 这样的复杂软件，如果基于面向过程的方式该如何开发。这个时候，日益复杂的软件需求，在计算机性能不断提高的时候，却被软件的开发方式束缚了，这便是计算机世界的第二次软件危机。\n《人月神话》一书中描述了这样一个有关软件危机的案例：\n在IBM 公司开发 OS/360 系统的时候，投入成本达到了美国曼哈顿原子弹计划的 25%，耗资达数亿美元。系统约有 4000 多个模块，100 万条指令，使用人力超过 5000 人年。即使如此，项目还是延期交付了，并且交付以后系统中仍有大量缺陷。就可以太复杂了。\n随着第二次软件危机的爆发，面向对象编程逐步取代了面向过程的结构化编程。以最符合人类思维的视角抽象问题，相比以最符合机器运行特征的算法与数据结构抽象问题，前者成为了软件设计准则的第一优先级，从此面向对象的开发思想开始占据主导地位，并风靡至今。\n将面向过程与面向对象结合起来的开发思想\n虽然面向对象是后来产生的，并且解决了面向过程开发复杂软件面临的困难，但是这不是说，面向对象就没有缺点，面向过程就没有优点。\n先看面向对象的缺点。具象的事物很好抽象，虚拟的事物一般难以定义，这种困难多半来源于客观事物对象的边界模糊而造成的。在分析需求并划分对象时，还存在观察客观事物角度的不同而产生的差异，以及因对象划分粒度不同而产生的差异，这些差异不仅会给团队协作开发带来难度，在后续的软件维护中，也存在阅读与理解上的困难。\n再看面向过程的优点。面向过程开发，由于是针对事务流程而设计的，天生不存在角度、抽象层次及划分粒度的烦恼。线性的思考和处理问题方式，至今为很多程序员所喜欢，特别是数学出身的程序员。有些程序员甚至用面向对象的语言，写面向过程的代码。\n下面我们开始步入正题，阐述两种开发思想结合起来的开发方式：\n 第一步，系统分析。用结构化思想进行系统分析，厘清软件需求中所有的事务流程，产出数据流图。 第二步，系统设计。仍然用结构化思想，依据数据流图，划分软件模块，产出系统结构图。在这个阶段，对于软件中可能存在的关键难点，可以拆出小需求来，用面向过程的方法迅速进行技术方案验证。如果预想的技术方案实现不了，则直接会影响系统机构图的产出。 第三步，面向对象软件架构与设计。在第二步的基础上，依照系统结构图，进行面向对象的软件设计，在这一步，才开始真正的面向对象开发，是开始编写代码的阶段了。 第四步，面向对象的编程实现。 第五步，测试部署与维护升级。  两者结合开发的一个小示例\n下面看一个小示例，软件需求是这样的：输入一串数字，使用 AES 或 RSA 算法加密，然后输出加密结果。\n第一步系统分析，产出数据流图。\n \n第二步系统设计，产出系统结构图。在这一步里，确定了模块划分，其中输入、输出和选择加密方式这三个都是 UI 模块，RSA 和 AES 是算法模块。\n \n第三步是面向对象的架构与设计，这一步要落实在项目与具体的代码上了。第四步与第五步不再赘述。\n通过这种结合的软件开发方式，可以最大化发挥面向对象和面向过程开发思想的优点。前两步都是结构化面向过程的分析与设计，如果系统足够复杂，对这些前期工作都可以将需求拆开来，分给不同的开发者去调研。只有到了第三步，所有东西都已经确定了，这个时候才可以制定和施行严格的项目开发计划。\n还有，经过了第二步以后，第三步在进行架构设计时，也能产出更好的系统设计。而如果没有第二步，什么都不清楚呢，直接进入第三步，则可能有重新调整架构、返工、延时等项目风险出现。\n"},{"id":2,"href":"/posts/2022/1015.html","title":"通过编写反派配角剧情，推动主线剧情向前发展，及写长篇网文与编程范式的关系","section":"Posts","content":"通过编写反派配角剧情，推动主线剧情向前发展，及写长篇网文与编程范式的关系 #  这是关于故事前期设计的一点小感悟，将人物放在矛盾的关系链条上，让剧中角色相互间具有矛盾的人物标签，故事自然就容易向前推进。\n在《相亲当天》中，初期，战奶奶希望海彤与战胤好一辈子。战胤坚持要防着海彤是只为圈钱的「心机女」，海彤对此则是独立自主随缘无所谓，这时候战胤与海彤两人是对立的，如果不是有战奶奶存在，两人的感情很难升温，故事也很难继续讲下去。\n在《射雕英雄传》中，金庸也安排了很多对立的矛盾关系。郭靖与杨康性格对立，成长环境对立。东邪西毒对立，北丐南帝独立。金轮法王与中原武林对立。大宋与金国、蒙古对立。在大宋与蒙古对立的时候，作者还巧妙故意安排了郭靖是蒙古国的金刀驸马，这个角色属性的设定，给郭靖和黄蓉的感情线发展制造了很多精彩剧情。众多的对立关系，保证了故事演绎出很多有冲突的情节。什么时候剧情不好发展了，作者只需要让坏人出来作妖就可以了。\n郭靖与黄蓉感情线的发展，在后期基本圆满的时候，先是让欧阳克出来向黄岛主提亲，后来又杀死江南七怪其中的几位，嫁祸于郭靖，这一招一下就让郭靖与黄蓉的感情陷入了危机。还有几次，两人感情甚好的时候，突然华筝就从大漠来中原了。华筝的出现，总是能给两人的感情带来小风波。金庸先生仿佛非常擅长通过写反派配角，推进主线剧情的发展。\n有道友讲，这是金庸的下意识，他没想那么多，就是写着写着，还不想结束，当主线没有什么可以写的时候，就在再搞点支线情节搞一搞剧中主角。\n可能是这样的，或许金庸在写作的时候，不像古龙写的是强悬疑，没有很刻意的前期设计在里面。但基本的前期故事梗概设计应该是有的，这个设计就是人物角色中的矛盾标签，以及地图的预期安排，例如《射雕》中的牛家村、蒙古大漠、大宋地图等。\n是不是感觉剧中主角很可伶，像作者的提线木偶，作者想让他们干什么，他们就必须干什么。这可能也是写作的趣味所在。\n下面聊一下写长篇网文与编程范式的关系。\n在编程中，面向过程与面向对象的区别是，前者是在分析需求后，先定义好数据和一系列函数，依次线性地调用这些函数以完成需求；后者则是在分析后，先定义一系列对象，在对象中集成属性（数据）和方法，然后开始调用一个对象的方法，这个对象的方法又会自动调用另一个对象的方法，就这样一直调用下去，直到最后把需求完成。\n写短篇小说就像使用面向过程的方法开发软件，而写长篇小说，尤其写长篇网文小说，就像以面向对象的编程范式在开发软件。在长篇写作中，先定义好一个个有矛盾关系的势力、团队和个体，然后找到一个切入点，开始启动，这个动作就相当于面向对象开发中对第一个对象方法的调用，整部作品一旦启动，故事便可能会一直发展下去，直到结束。这是一种理想情况，这种方法说起来简单，真要做起来尚不知有什么困难。\n"},{"id":3,"href":"/posts/2022/1014.html","title":"由鸭子测试看 Go 语言的接口实现","section":"Posts","content":"由鸭子测试看 Go 语言的接口实现 #  「If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.」\n中文：「如果一只鸟它走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。」\n这便是「鸭子测试」，它是一种判定思想。这句话据记载来源于美国的一个诗人，叫詹姆斯·惠特科姆·莱利，他曾说过或写过这样一句话：\n「When I see a bird that walks like a duck and swims like a duck and quacks like a duck, I call that bird a duck.」\n中文：「当我看到一只鸟像鸭子一样走路，像鸭子一样游泳，像鸭子一样呱呱叫，我就叫它鸭子。」\n无法确定莱利写这句诗的具体时间，不过绝不会晚于 1916 年，因为这一年莱利人去世了。在 1916 年，计算机都还没有诞生。关于「鸭子测试」的思想，最先并不是应用在计算机领域，而是政治领域。1946 年，也就是 ENIAC 计算机诞生的那一年，美国有个工会领导在一个公开集会中这样指责一个共产主义者：\n「我无法证明你是共产主义者。但当我看见一只鸟叫得像鸭子，游得像鸭子，也走得像鸭子，长着羽毛也有脚蹼，还和鸭子在一起，那我当然会判断它是个鸭子。」\n这句话很讽刺，且无理。\n历史上也曾有记者用「鸭子测试」的逻辑，去指责另一个人的独裁行为：\n「我无法证明你是一位独裁者。但当我看见一个人他说话像独裁者，行动像独裁者，还身处独裁者的机构和组织之中，和独裁者在一起，那我当然会认为他就是一名独裁者。」\n「鸭子测试」的思想之所以在多个领域被人们乐于运用，在于它是一种归纳思想。它不严谨，但却能普遍被人们在有限范围内接受。后来计算机诞生以后，这个判定思想又被应用于编程之中，并派生出一种「鸭子类型（duck typing）」。所谓鸭子类型，顾名思义就是可以应用鸭子测试判定或与之有关的类型。\n如果你还没有理解这种编程中的「鸭子类型」，我在这里尝试翻译一下：\n假设类型 I 有 A、B、C 三个方法。如果对象 O 既实现了方法 A，也实现了方法 B，又实现了方法 C，那么我们便可以认为对象 O 就是 I 类型。\n鸭子类型有时候在动态语言中，被用于实现多态。下面看一个多态的例子，它是Python语言的。\n1class ClassA: 2 def print(self): 3 print(“10 x in class a.”) 4 5class ClassB: 6 def print(self): 7 print(“in class b.”) 8 9def printIt(instance): 10 instance.print() 11 12def demo(): 13 instance = ClassA() 14 printIt(instance) 15 instance = ClassB() 16 printIt(instance) 作为同一个变量 instance，当我们准备调用它的 print 方法的时候，它既可以是 ClassA，也可以是 ClassB。在实例方法 print 被调用的时候，两个类型完全可以有不同的表现。在这个类型中，我们可以认为 ClassA 和 ClassB 是一对鸭子类型。\n动态语言的这种「鸭子类型」方便性，既是它的优点，也是它的缺点。它可以让程序员不必费力地像 Java 那样先定义接口然后再实现接口，可以直接调用，只要方法存在。缺点也很明显，如果代码有问题，例如调用了没有定义的方法，异常只有在运行时才会爆发出来。静态类型的编译型语言就没有这个缺陷，变量都有严格的类型，类型上有什么方法，没有什么方法，在编译的时候就能提前确定并暴露给开发者，这是静态语言的优点。\nGo 语言作为高级编程语言的后起之秀，它兼具了静态语言和动态语言在类型设计上的优点，它既让开发者没有类型声明之累，又可以在编译阶段就确定类型错误。在这一点上，Go 语言是怎么做到了呢？\n就是依靠「鸭子测试」的判定思想，下面看一个 Go 语言实现接口的例子。\n1type IGreeting interface { 2\tsay() 3} 4type Duck struct {} 5func (d Duck) say() { 6\tfmt.Println(\u0026#34;Hi，LIYI。\u0026#34;) 7} 8// 测试 9func sayIt(speaker IGreeting) { 10\tspeaker.say() 11} 12func main() { 13\tspeaker := Duck{} 14\tsayIt(speaker) 15} 解释一下这个代码示例：\n 第 4 行 Duck 是一个结构体，Go 语言的结构体相当于 Java 的 class。 第 1 行的 IGreeting 是一个接口，从表面上看，没有任何类型与它有关系。其实不然，第 5 行，因为我们在 Duck 类型上实现了 say 方法——即接口 IGreeting 的唯一成员，所以 Duck 类型就被认为实现了接口 IGreeting。 第 9 行，函数 sayIt 需要一个 IGreeting 类型的参数，在第 14 行，我们可以把 speaker 传递给 sayIt，因为 Duck 类型已经实现了接口 IGreeting。  Go 语言关于接口的实现，就是一种「鸭子测试」的判定，只要一个结构体实现了某个接口的所有方法，就认为该结构体实现了该接口。这种做法简直太方便了！\n我 10 年前第一次在公司项目中使用这种语言，用了一次就爱不释手了，那时候我就想，不出十年，Go 语言就会被大多数程序员接受。果然，今天 Go 语言已经被称为互联网时代的 C 语言，在腾讯内部提交的代码中，据统计 Go 语言已经超过 C++ 成为第一热门语言。国内外有越来越多的程序员，还有公司，无论大厂小厂，都选择学习并在生产环境中应用了 Go 语言。\n最后，留一个问题给你：玩具大黄鸭经过「鸭子测试」的判定，被当成了鸭子，但其实它不是鸭子，如果有一天有人要给它喂食，还要它下蛋，怎么办？在 Go 语言中，还以本文中的示例为例，假设未来某一天接口 IGreeting 因为需求扩展添加了一位新成员 walk，但是 Duck 没有实现 walk 啊，这时候编译软件肯定会报错啊。如果项目中像 Duck 一样的结构体少还好办，如果很多且分散于项目各处，这种情况应当怎么办呢？\n"},{"id":4,"href":"/posts/2022/1013.html","title":"JavaScript 到底是不是面向对象语言？面向对象语言有哪三个基本特征？","section":"Posts","content":"JavaScript 到底是不是面向对象语言？面向对象语言有哪三个基本特征？ #  是，当然是。\n为了讲清楚这个问题，我们需要先看一看「什么是面向对象编程」和「什么是面向对象语言」。\n什么是面向对象编程？使用面向对象语言进行的编程就是面向对象编程。\n什么是面向对象语言？在面向对象编程中使用的编程语言就是编程语言。\n好吧，是不是感觉我说了两句废话，确实，编程语言可以自举，但是概念不可以。在讨论面向对象语言的时候，一般要界定这门语言的三个面向对象特征：封装、继承和多态。凡具有这三个特征，就是面向对象语言；不具有，就不是。\n也有人讲过，面向对象特征有四个：封装、抽象、继承和多态，比一般的说法多了一个抽象。其实抽象不能算是面向对象的基本特征，因为在面向过程编程中，也有抽象；本质上编程就是抽象，就是将现实世界中一个或几个层面的东西剥离出来，用编程语言表达出来及进行交互控制。\n进一步考察面向对象语言的三个基本特征，我们可以从语言的具体功能上重新阐述它们，这实际上还有助于我们记忆，否则，这三个特征名字你未必记得牢固。\n先看封装。什么是封装功能？就是把属性、方法封装在一个类（class）中。你想一想，在你接触的编程语言中，C#、C++、Java 等，它们是不是允许我们这么干？\n再看继承。什么继承功能？先定义（封装）了一个类 A，接着又定义了一个类 B，让 B 继承于 A，这样 A 的属性和方法（公开的）B 也有了（继承了）。\n最后看一下多态。什么是多态？这是使用时的一个特征，与接口或虚类有关。先声明一个接口 I，然后让类 A 实现它，让类 B 也实现它。一个类型为 I 的变量，当它是类 A 的实例时，它具有类 A 的特性和行为特征，当它是类 B 的实例时，它又开始具有类 B 的特性和行为特征，这就是多态，仿佛有多个状态。\n所以说，封装、继承和多态，这三个特征它们分别对应于语言中类的定义、类的继承和接口的定义和使用——这三个方面的能力，都有具体的功能含义。反观抽象，它明确对应于语言中的那个能力呢？没有，所以抽象并不能算是面向对象语言的一个基本特征。\n最后，回头来看问题，JavaScript 是不是面向对象语言？那就看它具不具备三个面向对象的基本特征吧。\n首先封装，JS 有 class，还有美元符号（$）开头的私有属性，可以。然后是继承，ES6 有 extends，没问题。即使在 ES6 之前，也可以在一个对象上定义属性和方法，可以使用原型（prototype）实现对象之间的继承，对封装和继承的支持也没有问题。最后多态，也没有问题。虽然 JS 没有接口（它目前仅是保留了 interface 作为语言关键字），但是它的 Object 类型几乎是万能的，相当于是任何一个对象的接口，实现多态也完全不是问题。\n使用 extends 关键字可以实现继承，使用原型也可以实现继承，它们只是实现方法不同，对应的面向对象的内在继承思想却是一致的。\n最后，留给你两个思考题：\n Go 语言算是面向对象语言吗？ 面向对象语言为什么会出现？  "},{"id":5,"href":"/posts/2022/1012.html","title":"目前国内前端哪个 UI 类库简单好定制，用的人最多？","section":"Posts","content":"目前国内前端哪个 UI 类库简单好定制，用的人最多？ #  如果基于 jQuery 开发多页面响应式 Web 应用，可以使用 Bootstrap。\n如果基于 Vue3 开发单页面 Web 应用，可以使用 Ant Design Vue 3。在基于 uni-app 开发多端应用时，在 uni-app 中也可以引用 Ant Design Vue。\n如果同时开发以上两种多页面应用和单页面应用，为了减少智力负担和学习成本，可以使用 Bootstrap 和 Bootstrap-vue-3。\n在开发管理后台 Web 应用的时候，另外一种选择是 Element Plus，但有开发者说这个开源类库现在维护力度变弱了，有一些坑，PR 提了半年无人响应，已经不建议使用。官方文档已经从独立域名切换到了 Github 免费域名，打开网站在页面导航切换的时候，时时发生 404 错误，这种问题都无人处理，种种迹象表明这个曾经被作为后台 Web 样式类库第一选择的项目，现在已经开始摆烂了。\n其实，开发 Web 应用目前统一使用 Ant Design Vue 3 就可以了。无论开始是开发面向 C 端用户的 Web 应用，还是开发 B 端或运营团队使用后台管理 Web 应用，都可以选择 Ant Design。Ant Design 支持 CSS 样式定制，在编写后台应用或企业 Web 应用时，大不了把 UI 风格修改成蓝色系就 OK 了。\n \n另外还有一个 Material 样式风格的开源类库 Vuetify，打开它的官方文档，每一页都有一个广告。我并不反对放置广告，但每一页都放，这种放的方式说明操作者很不用心，可能这个项目在开发者那里已经不重要了，也已经开始放养了。\n我们应该选择什么样的类库呢？\n1）选择那些在功能、性能上没有短板的类库，可以满足我们需求的类库。\n2）我们要选择背后有大厂使用和支持的类库，这样的类库更有可能走得更远，发展得更完善。\n开源项目不存在开发完善、已经大功告成一说。所有开源项目注定都要不断维护，不停和开发者一同进步。开源项目如逆水行舟，不进则退。\n"},{"id":6,"href":"/posts/2022/1011.html","title":"程序员大牛是如何编写程序的？在开始编码之前，他们会先在纸上推演程序吗？","section":"Posts","content":"程序员大牛是如何编写程序的？在开始编码之前，他们会先在纸上推演程序吗？ #  好的程序员是怎么写代码的呢？点燃一根烟，一边吸一边进行周密的思考，待想法成熟了，一把操起键盘，一阵噼里啪啦敲击，一气呵成吗？\n或者这样，使用具有步进调试功能的 IDE，例如 Visual Studio，一边编写代码，一边调试代码，一步一调试，直到完成所有需求？\n你是哪种编写方式呢？那些计算机编程大牛们他们一般又是怎么写代码的呢？\n肯·汤普森说：\n 我只通过 printf 语句（或类似的 console.log）进行调试，几乎从不使用单元测试或调试功能。通过先设计数据结构开始项目，然后自下而上逐步开展工作，可能会写一些一次性的测试示例。（其实很多大神都是这种编程方式。）\n 乔·阿姆斯特朗说：\n 在设计软件时，我更喜欢在开始编写代码之前，尽可能严格地记录文档，尤其是对于那些涉及实时网络协议的困难项目。我首先使用原型来解决关键问题，而对于调试，则只使用打印语句（这一点和肯·汤普森一致）。\n 杰米·扎温斯基说：\n 我也更喜欢只使用打印语句调试代码（大神的工作方式惊人一致）。我的流程是自顶向下或自底向上写代码，让代码自然进化，在必要时重构。在开发过程中，我几乎从不使用单元测试，我觉得它会减慢开发速度，破坏我的开发节奏。\n 这三位毫无疑问都是计算机世界的大牛。第一位是 C 语言的创建者，第二位是 Erlang 语言的创建者，第三位是 Mozilla 浏览器的创建者。有人说，他们开始编程的年代，还没有可以步进的调试器，还没有单元测试这些完备的开发理念，以致于他们没有养成现代「良好」的编程习惯。\n对于这些话，我想说，TOO YOUNG TOO SIMPLE，肯·汤普森可是可以手撸 C 语言和 Unix 操作系统的人，他如果想写一个可以步进的调试器，或者设计一个完善的 TDD（测试驱动开发）工程思想方案，你觉得他做不到吗？肯·汤普森今天还在 Google 一线工作，与同事们一起创建了并维护着 Golang 语言，你觉得他没有接触过可以步进的现代调试器吗？还是他年纪大了学不会呢？\n我觉得根本原因，在于扎温斯基说的那句话，使用步进调试功能和编写单元测试代码，会减慢开发速度，破坏开发节奏，这是根本原因。程序员写的程序是并发的、多线程的，但程序员写代码这件事却是单线程的，他们可不想被像 CPU 一样打断。\n对程序员如何编程这个问题，一个有经验的程序员表示：\n 在我看来，编程是一门艺术。一个好的程序员是一个艺术家，是一个思想家，是一个问题解决者，是一个创造者和一个有远见卓识的人，所有优良品质都结合在了程序员身上。他们以简单的方式思考可以长期解决问题的方案，他们愿意遵守规则；如果还没有规则，他们也可以创建规则然后遵守。优秀的程序员也会读很多书，并且总是在技术上不断更新自己。\n 另一位有近 30 年编程经验的程序员 尼古拉·米哈洛夫表示，编写程序并不想人们想象的那样酷，一点也不帅。下面内容来自他的分享。\n在高中期间，我在全国编程比赛中名列前三，并且是国际比赛的候选人。我自己和团队也曾在国民赛中排名第一。作为下班后的爱好，我制作了一个绘画应用程序，最终该程序拥有了约 1000 万用户，并且与类似应用程序相比，运行时出现的问题非常少。它在 Windows Phone 的印度照片应用程序中排名第一，在西班牙排名第二。\n 这段经历说明他是一名出色的程序员，至少天赋很不错。\n 我认为没有「最好的」程序员，因为每个人的表现都不一样，即使是在同一个任务上也是如此。\n在我从事软件开发的前 10 年（共 28 年）中，我每天编写大约 13 小时的程序（很厉害，每天写 13 个小时的代码，并不是我们想象的老外每天只工作 8 小时，只写 2、3 个小时的代码）。我感觉这很有趣，我去完成任何软件方面的事情都没有感到压力，都是基于兴趣驱动的。我不断向朋友学习，从书籍中学习，做项目，尝试做新的事情，我很少感到无聊，总有新东西要学。我从 12 岁左右开始，就一直是这样的状态。\n下面是我对编码的看法：\n  如果代码量很小，例如是程序的一部分，可能是一个 RESTFul API，或者一种小算法，这时候可能要考虑使用的数据结构是什么，这种情况下应该是直接上手就写了，没有什么提前的推演和规划。\n  要尽可能多地考虑边缘情况，并针对它们一一处理和测试，确保处理所有可能发生的错误和已经发现的边缘情况。举一个简单的例子，假设需求是「反转一个字符串中的所有单词」，对于一些特殊的字符串，例如空字符串、空白字符串、一个单词的字符串、2 个单词的字符串、10000 亿个单词的字符串，我们应该如何处理呢？\n还有，什么是空白字符串，这涉及到系统中对空白字符的定义，对于不同的空白字符或其组合，例如空格、制表符、不可打印的空格、换行符等，当遇到这些符号时我们又如何处理呢？\n还有一些其他方面的特殊情况，例如单词之间，句首和句尾的多个空格如何处理？对于从右到左的语言和没有单词分隔符的语言，如果我们在没有分隔符的情况下，混合使用阿拉伯语+英语单词又会发生什么？等等，看似这是一个简单的小需求，背后却隐藏着很多需要考虑的边缘情况。它并不简单。\n  我主要在代码中思考，而不是编码前准备，尤其是前 10 年。后来我开始重视编写注释，会在注释中解释更多内容，以便后续阅读和维护方便。但在一开始，我只要代码可以工作，很少使用或不用注释。\n  几乎没有单元测试。我觉得它们就像道路上的侧护栏，侧护栏用于阻止可怕的汽车碰撞，任由车辆在护栏上刮擦。我认为生产中的大多数错误都在单元测试可以捕获的场景之外，所以觉得单元测试很鸡肋。（上面提到的边缘情况处理，是在代码中处理的，并非指在单元测试中覆盖。不同类型的项目，单元测试的作用和重要性是不一样的。还有，因人而异。）\n  比单元测试更好的方法是，对于任何代码更改，通过分析当前函数的所有消费代码，分析它们触发的所有副作用，以及所有可能影响到的边缘情况，然后测试所有代码。这能让我们对整个代码库有更好的理解，可以消除对单元测试的「温暖」的依赖。将整个项目装在心中，做到熟悉每一行代码，这样做的好处是：1）首先便于发现新的错误和需要改进的地方；2）确实有助于帮助我们提高代码质量。\n事实上这件事并不困难，一旦有条不紊地进行全库的洞悉，这件事就会变得简单。我已经使用它取得了巨大成功，有一个项目，有数百万用户，作为一个高端嵌入式系统的软件解释器，和一个高科技研究公司桌面软件的一部分，在生产中运行服务 2 年，0 崩溃。另一个项目运行了大约 5 年，没有出现一个问题，直到服务器退役后我得到了一个 ping，发现它仍然被大约数百名未迁移到新系统的用户使用。\n我知道有很多错误或异常，是不会或很难被单元测试捕获的，这些异常通常是集成的、未考虑的边缘情况或类似的东西。通过洞悉项目，在代码变动时测试一切，并记录一切，不必进行单元测试。我知道这个观点有争议，可能会激怒很多人，有人可能会说，团队其他人怎么办，如果你忘记了测试代码怎么办，等等。好吧，这时候就是团队测试纪律、团队文化、最佳实践和编码规范要发挥作用的时候了。\n在研发中发现问题，而不是从现在起 6 个月后，那时候所有「单元测试」都已通过并且产品已投入生产运营，相比那个时候发现问题要好的多。并且，我发现，一旦完成多次全面检查，后面这件事也会容易很多。这看似浪费时间，其实在节省时间。\n  对于更复杂的算法，我会写一篇关于如何工作的页面注释。（这也是为了方便回忆和他人阅读。）\n  对于变量命名，总是使用富有表现力的描述词，例如 currIndex、row、col 等。即使 x、y 都比 i、j 要好。\n  对于函数命名，尽可能实现自我记录。名称应该准确地说明函数的作用，要尽量避免函数中产生副作用。如果函数是有条件地执行任务，是一个动作，则可以命名为 UpdateUserIfNeeded(\u0026hellip;)，而不是 UpdateUser()，或者 GetInfoAndUpdateDb()而不是 GetInfo()。\n  对于强类型，考虑使用 User、SignedInUser、ModeratorUser 这样的类型。如果匿名用户尝试访问需要登录的资源，可能会导致编译时错误。（将用户分成不同的类型，胜于在一个 User 类型中处理所有用户身份。）\n  除了性能原因之外，尽量保持数据不可变。\n  我每天使用的提示检查模板是：1) 始终检查所有边缘情况；2）解析没有验证的数据；3）简化 if else 语言，如果可以就提前退出；d）快速崩溃，总是在需要开发人员立即修复代码的地方马上抛出异常，不要静默它们；这里要与用户错误区分开，用户错误总是要处理的，而开发错误总是选择抛出。\n  另外，在遇到困难时请不要自暴自弃。我大约每 5-10 行代码就会产生 1 个错误，这很正常，有错误绝不是不足。我喜欢通过处理边缘情况来规避大部分错误，但我不知道我没有捕捉到全部。庆幸你发现的每个错误吧，这些错误可以避免成为生产问题。有时在代码审查中，有 40 多条评论也是很常见的，接受自己就好。\n小结\n这是一位大佬，他分享了自己接近 30 年的编程经验，很诚恳。对于调试和单元测试，大佬都不喜欢在编码中途停下来做这件事，他们更喜欢在一次性编写完成后集中做自动化测试。与其被自己的单元测试打断，在中国开放式的工作环境中，我想他们是不是更介意被没完没了且毫无意义的会议打断呢？\n还有钉钉，你一直不回复，可以一直钉你，钉到会回复为止。我很想知道肯·汤普森如果在这样的环境中工作，他会是什么表情。\n参考\n  https://www.quora.com/How-do-the-best-programmers-write-programs-Do-they-reason-the-program-out-formally-on-paper-before-stepping-up-to-a-computer/answer/Nikola-Mihaylov  https://www.quora.com/How-do-the-best-programmers-write-programs-Do-they-reason-the-program-out-formally-on-paper-before-stepping-up-to-a-computer/answer/Debasis-Ray-5  http://www.dodgycoder.net/2012/07/old-school-developers-achieving-lot.html  "},{"id":7,"href":"/posts/2022/1010.html","title":"编写干净、清晰代码的9个小技巧","section":"Posts","content":"编写干净、清晰代码的 9 个小技巧 #  问题\n如题，以下这些编程技巧，可以让代码编写的更清晰，使初学者看起来更像一位老手。让初学者代码看起来老练的技巧，并不是什么奇巧淫技，而是谁都能看得懂、学得会的，很平常的技巧。相反，在代码中为了展示水平而刻意显得与众不同，这是不自信的表现，也是初学者的主要特征之一，反而自爆了初学者的短板。对于初学者，学会这些小技巧足矣。\n 软件开发不仅仅是编写代码，更是编写团队其他开发人员可以轻松理解的简洁代码。下面提到的 9 个技巧，它们将帮助你编写更清晰易读的代码。\n 这些技巧并不分什么编程语言，基本适用于所有编程语言，尤其是与 C 语言风格一致的语言。\n （1）使用描述性名称\n干净的代码很容易别人理解。在编写代码时，我们在局部代码中使用 i、j、k 等短名称，但有时候我们更应该使用有意义的描述词，来声明变量、参数和函数名称等。\n例如，不要这样写：\n1const n = 100; 2const it = 200; 而要这样：\n1const number = 100; 2const iterations = 200; （2）使用适当的空格和缩进\n我们程序员中的许多人认为，使用空格和缩进会影响编译器的速度，但这是不正确的，在编译型语言中它们的影响可以忽略不计，在解释型语言中的影响也不高于因代码不易读而带来的负面影响。\n你应该在代码中使用空格和适当的缩进，因为这会使你的代码更容易阅读与理解。\n 像艺术家一样，像国画或篆刻一样，把代码安排得错落有致。\n 举个例子，不要这样做：\n1function start() { 2var name = \u0026#34;LIYI\u0026#34;; 3var code = 200; 4} 而要这样：\n1function start() { 2 var name = \u0026#34;LIYI\u0026#34;; 3 var code = 200; 4}  除非你想故意写出自己不能被团队随意替换的代码，否则在任何时候，保持缩进和空格都是一条基础黄金准则。与其相关的还有空行，保持空行除了让代码行数增加，更主要的能让代码清晰。\n （3）尽量减少函数中的参数个数\n因为我们在努力使我们的代码清晰，因此我们应该尽量编写更易于阅读的函数，我们应该通过减少形参的个数以使函数变小，特别当这个函数及它的同类函数有不定数目参数的时候。如果我们需要使用两个或三个以上的参数，那么我们可以声明一个参数对象来代替。\n例如，不要这样做：\n1function register(name, email, password, phone, address, intresets){ 2 ... 3} 可以这样做：\n1function register(options){ 2 ... 3} 在 options 实参对象中，可以传递 name、email 等信息。\n 过度简化参数会让函数的调用条件不明确，简化参数其实一把双刃剑。在开始编写代码的时候，初学者可以简单遵照这样一条标准：凡函数有三个以上的参数，并且这个函数也不是高频调用的函数，就可以将其参数对象化。\n在小程序的平台 API 中，由于基本每个接口都有三个以上的参数，所以所有接口的参数，都是以一个 options 参数对象定义的。\n （4）每个函数仅负责执行一个任务\n多个任务放在一起处理，这很棒，但在编写清晰的代码方面不是。在许多情况下，开发人员会创建一个有能力执行多个任务的函数，但我们一般需要避免这种情况，因为这通常会使其他人难以理解。通过为一项任务创建一个函数，我们可以更轻松地组织复杂的代码。\n 某些任务，是需要分别用一个函数完成的；某类任务，是可以用一个函数完成的。代码就是要智能、批量处理问题的，如果不能这样做，还写代码干什么？有些初学者写代码，在解决某些问题时，用了很多 if else，如下所示，有时候嵌套还很深，这种情况完全可以智能处理一下，用一套代码处理一类问题就可以了，例如针对下面的代码利用 switch 语句等技巧改写。\n1public void onClick(View v) { 2 int id = v.getId(); 3 if (id == R.id.button1) { 4 startActivity(new Intent(this, StandardActivity.class)); 5 } else if (id == R.id.button2) { 6 startActivity(new Intent(this, SingleTopActivity.class)); 7 } else if (id == R.id.button3) { 8 startActivity(new Intent(this, SingleTaskActivity.class)); 9 } else if (id == R.id.button4) { 10 startActivity(new Intent(this, SingleInstanceActivity.class)); 11 } else if (id == R.id.button4) { 12 startActivity(new Intent(this, SingleInstanceActivity.class)); 13 } else if (id == R.id.button5) { 14 startActivity(new Intent(this, SingleTopActivity.SingleTopActivity1.class)); 15 } else if (id == R.id.button6) { 16 startActivity(new Intent(this, SingleTopActivity.SingleTopActivity2.class)); 17 } else if (id == R.id.button7) { 18 startActivity(new Intent(this, SingleTopActivity.SingleTopActivity3.class)); 19 } else if (id == R.id.button8) { 20 startActivity(new Intent(this, SingleTopActivity.SingleTopActivity4.class)); 21 } else if (id == R.id.button9) { 22 startActivity(new Intent(this, SingleTopActivity.SingleTopActivity5.class)); 23 } else if (id == R.id.button10) { 24 startActivity(new Intent(this, SingleTaskActivity.SingleTaskActivity1.class)); 25 } else if (id == R.id.button11) { 26 startActivity(new Intent(this, SingleTaskActivity.SingleTaskActivity2.class)); 27 } else if (id == R.id.button12) { 28 startActivity(new Intent(this, SingleTaskActivity.SingleTaskActivity3.class)); 29 } else if (id == R.id.button13) { 30 startActivity(new Intent(this, SingleTaskActivity.SingleTaskActivity4.class)); 31 } 32} 但有时候又不是这样，有时候我们为了让代码更直观，故意不使用 switch，而不厌其烦地使用大量 if else，这种情况一般发生在项目配置代码上。这类代码仅仅执行一次，它们本来就像配置文件，写得像配置文件也不足奇怪了。\n不要迷信任何规则，包括这篇文章里提到的规则。所有规则都有不使用的场景，这篇描述的仅是针对初学者，在大多数编程场景下适用的技巧。\n （5）尽量减少函数体的大小\n小型函数比大型函数，或包含大量代码的函数更容易理解。如果你正在处理大型项目，你可以使用类来封装函数，尤其是那些具有共同属性或同属一类的函数。\n（6）尽量减少一行中的字符\n因为我们正在编写易于阅读和理解的代码，因此我们需要减少每行代码行中的字符。这样我们的代码可以很容易适应屏幕，不需要水平滚动就可以查看代码。也不需要换行，因为在这种情况下阅读者需要左右晃动脑袋。\n 每行多少字符没有硬性标准，一般的说法是每行不超过 70 个字符，但现在程序员的浏览器尺寸越来越大，一行在不换行的情况下，能够容纳的字符也越来越多，所以具体字符轻视自己或团队的情况而定。\n （7）提交代码时，总是描述提交的原因\n你应该始终定义为什么要在 github 仓库中提交代码，就是每次提交代码时，都编写一下参数-m。这个习惯可以让我们了解几个月前代码中存在哪些错误，以及我们对代码做过哪些更改。你应该用 4 到 10 个词来定义描述信息，或者你也可以使用 1 个词轻松定义，总之要能够让自己很快想起修改的原因就好。\n（8）避免代码重复\n专注于创建可重复使用的代码。\n大多数初学者不会这样做——初学者一般把精力放在了代码能用上，但至少 70% 的初学者代码应该是可以重用重构的。这可以减少我们代码的大小。简单的方法是，你可以将你的工作分解为小任务，并为每个小任务创建一个单独的函数。\n 面向对象编程中有一个 DRY 原则，它是 Don\u0026rsquo;t repeat yourself 的简写，意思是不要重复自己。重复编写已经编过的代码，有时候会让程序员感到羞赧，很多聪明的程序员不会因为违反 DRY 原则而编写愚蠢的代码，反而会因为避免这种愚蠢而陷入过度设计的泥沼，这种情况同样也值得警惕。\n对于初学者而言，简单的规则是，只要发现有三处代码一样，甚至只是十分相似，就可以考虑将它们重构为一个函数。至于将这个函数放在哪里，放在需要它的最小范围里。能放在一个类里，就不要放在包（package）里；能放在一个包里，就不要放在一个模块（module）里，总之范围尽量缩小就是。\n （9）不要过度注释\n通过以上的技巧，由于我们已经给了变量、参数、函数名以有意义的描述，因此代码中一般不需要注释。仅在使用某些第三方 API、应用程序、模块或处理外部调用请求时，才需要编写注释。要避免因编写注释，而使代码显得累赘冗余。\n 程序员很容易从一个极端走向另一个极端，由从来不写注释变得为每行代码、每个函数都写注释，这没有必要。阅读注释也需要消耗精力，除非你想故意为某些代码留下「烟雾弹」，例如「此行代码千万别动，动它的人全都开除了」，否则不要为了写注释而写注释。\n 通过编写其他人易于理解的简洁代码，你可以快速成为一名出色的程序员；通过阅读其他人编写的优秀代码，你可以迅速领会和掌握这些技巧。\n总结\n以上这些只是简单的初学者技巧，学会它们可以避免自己看起来很菜，甚至看起来像一个有经验的老手，就像一个人他的长相无论是否普通，但需要他把个人卫生打扫好，衣着干净整洁，给人的整体印象总不会太差。后续具体到每一门编程语言，都有专门的编程规范，可以再进一步具体地学习加强。\n参考\n  https://programmersallaroundtheworld.quora.com/9-tips-for-writing-clean-code  https://zhuanlan.zhihu.com/p/20573365  "},{"id":8,"href":"/posts/2022/1009.html","title":"Linux 真的会因为开源而失败吗？","section":"Posts","content":"Linux 真的会因为开源而失败吗？ #  我不确定当你看到这张图时，是不是和我一样感到震惊？\n \n这行图大致描绘了三个主要 Linux 发行版 Debian、Fedora 和 Slackware 的分支演化情况，三个分支下，每个分支背后都隐藏着一个绝顶聪明的开发者或一个精英团队在维护。\n这张图来自 托米斯拉夫·图拉利亚，他认为 Linux 发行版之所以出现这种过度野蛮的生长——产生了一百多种不同的 Linux 发行版，完全是由于开发者的自负（BIG EGO）。\n下面以 Debian 路线的分支演化举例，看一看这种来自开发者的自负是如何体现的，其他两个分支的情况与其类似。\n确实 Debian 是一个不错的发行版，它稳定、健壮，但它缺乏新的、酷的东西。因此，一些开发人员开始捯饬轻量级的 Linux Knoppix——一个基于光盘或 USB 闪存启动的 GNU/Linux 系统，而另一些开发人员则开始开发更前沿的版本 ——Ubuntu。\nUbuntu 因为几乎可以在全世界范围内免费分发 CD，它因此受到了很多人的喜欢，Linux 系统也被更多人看到和使用。我 2006 年在北京从事编程工作的时候，同办公室的同事在网上免费就申请了一个 Ubuntu 系统，当他收到 CD 包裹的时候，他还高兴地拿给我们看。在印度，有很多地方网络基础设施不完善，只要当地的开发者提出申请，他们就能得到一张免费邮寄的系统安装盘。CD 大概有 700MB，基本支持所有的主流硬件，不需要到处找驱动就可以马上安装使用，想想这真让人激动。\n但是很多人不喜欢 Ubuntu 的界面，不久，除了 Ubuntu，就诞生了 Kubuntu、Lubuntu 和 Xubuntu，它们相当于 Ubuntu 的大皮肤，或者说是三件时尚——想时尚的外套。\n下面这些话基本来自图拉利亚的抱怨，他是一位非常有经验的开发者，他讲的话是可信的。\n 一些人想要更好的软件支持，他们制作了 Ubuntu Studio； 一些人想要一个不同的界面，他们制作了 Mint； 一些人喜欢一切，但希望界面颜色更好，他们制作了 ZorinOS； 谷歌想要一个更简单的版本，他们制作了 ChromeOS； 一些人希望它更像 MacOS，他们制作了 Elementary OS； 一些人想要一个更安全的版本，他们制作了 ParrotOS； 一些人讨厌已有的这一切，他们制作了 Solus、Arch 等。  等等，还有很多，数不胜数。\n随着时间的推移，所有这些开发者都在分散、减少，而不是一起工作。他们必须一遍又一遍地解决相同的问题，而不是为了一个共同的目标而共同努力，所以就有了开头那张「荒谬」的图表。想象一下，如果聪明的开发者都在同一个 Linux 版本上工作，那会是一个什么样的结果？\n下面说一下我的观点。\n先说 Linux 是否失败。如果拿 Linux 桌面版与 Windows 系统的市场份额做比较，Linux确实是失败了。但是 Linux 本来就不是一个商业公司啊？如果拿 Linux 的作者林纳斯·托瓦兹（Linus Torvalds）与微软的创始人比尔·盖茨（Bill Gates）作为一名程序员对比，显然林纳斯·托瓦兹又非常成功。百年之后——或者二百年之后，微软帝国大概可能不存在了，但 Linux 系统可能还在。Linux 发行版越是繁华多样，这种成功就越是耀眼；有如此多的分支，不是 Linux 的弱点，反而是它成功的标志。\n再谈一下动机。让一百多个发行版的开发者为一个发行版而努力，这是公司的行为，试问，谁给他们发薪水？能写这些系统的家伙，他们单位小时的技术薪水应该都不低，谁有财力养活他们？如果把他们招揽在一起，在一起共同维护一个系统，这不就是微软吗？\n像软件、谷歌这样的大厂实行的研发机制，像计划经济；而 Linux 发行版实行的，更像是开源世界里的市场经济。这两种模式它们肯定会相互学习，大厂学习开源模式的优点，甚至带头搞开源，这都不稀罕；有越来越多的开发者——像图拉利亚这样的开发者，也会看到发行版发展混乱、缺少规划的问题，但解决或改善这个问题可能还需要时间和智慧。\n还有，有一点必须提一下，有一些发行版的背后是一个小团队在维护，他们之所以那样做，源于他们的客户的需要。虽然混乱，但星星点点都是经济价值。\n当我第一次看到篇首的那张分支演化图时，我感到的不是震惊，不对，也可以理解为是一种震惊，惊于 Linux 发行版发展的繁荣与兴旺，而不是混乱与无序。\n我不确定当你看到这张图时，是不是和我一样感到震惊？\n参考\n  https://www.quora.com/Does-Linux-really-fail-because-it-is-open-source/answer/Tomislav-Turalija  https://zh.wikipedia.org/zh-tw/Knoppix  "},{"id":9,"href":"/posts/2022/1009-2.html","title":"互联网下的微服务架构模式有哪些，都有那些传统的设计模式与其相像？","section":"Posts","content":"互联网下的微服务架构模式有哪些，都有那些传统的设计模式与其相像？ #  下面列举的肯定不是全部，仅是一些例子。\n  API 网关模式。负载均衡、服务发现、数据过滤、权限验证等，都可以放在这里。这里就像城门，来自客户端的请求想进城，都必须通过这里。服务发现简单理解是，为客户端找到它需要并可以连接的服务器 IP 地址。这个模式像传统的代理模式。\n在此模式下， APISIX 是 Apache 软件基金会下一个云原生 API 网关软件，也也是一款不可多得的国产开源软件，它兼具动态、实时、高性能等特点，提供了负载均衡、动态上游、灰度发布、服务熔断、身份认证、可观测性等流量管理功能。它主要采用 Lua 语言编写。\n  客户端 UI 组合模式。像桌面上的 Widget 一样，每一块都是独立的，可以独立请求和展示数据。优点是组合方便，缺点是资源请求可能多且浪费。像传统的外观模式。\n  服务与数据库一一对应模式。一个服务对应一个 Schema 是实现数据私有化的最佳选择，可以为每个子系统的开发团队单独配置一个数据库连接账号，这样便可以限制每个子系统的数据访问权限。优点是数据各自为政，架构清晰简单；缺点是设计多个微服务或团队的查询等操作变得复杂了。这个模式不像任何一个传统的设计模式，它像面向对象的基本特征之一：封装。\n  Saga 模式。这种模式是上一种架构模式的补充，Saga 是一种本地跨语言的事务链，它不仅有本地事务编配、编排，还有总事务失败后的补偿机制。像传统的责任链模式。\n在此模式下， Apache ServiceComb Pack 提供了技术解决方案，它主要基于 Java 语言实现。\n  断路器模式。就是熔断模式，像股票一样，跌的太狠了，强制关停，避免事态进一步恶化。具体实现方式可能是这样的：在网关处记名监听来自客户端的网络请求，如果某个客户端屡屡请求失败，则强制断开和限制其连接，避免发生雪崩效应；在一定时间后，再允许这个客户端发起限量连接。\n  子域分解模式。按照业务将大系统拆分为小系统，由各个小分队分别折腾。像传统的组合模式。\n  绞杀榕模式。类似传统的装饰模式，像一个含羞草慢慢将旧系统包裹、吃掉、重构、关停。慢慢外界不知道这个系统，直到有一天在数据检测中发现无人使用了，将其关停。\n  反腐蚀层模式。这个模式厉害，它要确保旧的系统不需要做出改变，同时新系统也不需要在设计和技术方面做出妥协。**计算机世界的任何问题，都可以通过添加一个新的层来解决。**这个模式可能是这样实现的：添加一个新的层，用于新旧数据的转换——当然前提是，新旧数据在理论上可以相互转换。像传统的代理模式。\n  参考\n  https://www.infoq.cn/article/Pv1qlEa1GgU7m0sWBmdI  https://github.com/apache/servicecomb-pack  https://github.com/apache/apisix  "},{"id":10,"href":"/posts/2022/1009-3.html","title":"弱的软件开发人员都跑到哪里工作了？","section":"Posts","content":"弱的软件开发人员都跑到哪里工作了？ #  信不信由你，他们可能成为了你的上司。\n首先声明一下，以下内容主要翻译自 托米斯拉夫·图拉利亚，主要是他的观点。我作为一名弱的软件开发人员，可没有资格成为一群强的软件开发人员的上司，更没有压榨他们。\n下面是图拉利亚的话。\n我在 IT 领域工作了大约 10 年，主要在 20 至 100 人的中小型公司工作。在这类公司中，最薄弱的环节却进步得更快，这是一个悖论，但它却是真实的。下面是一些记录自真实世界的例子。\n示例 1\n当优秀的开发人员在老旧项目上勤恳工作并不断解决 Bug 时，一个糟糕的开发人员会为自己的管理辩护，因为整个项目是以「错误的方式」完成和维护的。糟糕的开发人员因此会被提升为团队负责人，并肩负起了「以正确的方式」做事的使命。\n 这大概就是好人长在嘴上，会干不如会说。这是一句鸡汤。\n 示例 2\n公司有一个开发人员团队，正在开发一个非常大的项目，他们急需要一个项目经理，所以他们将最弱的开发人员提拔为项目经理。没有人想念他，因为这个人在编码上非常糟糕。因为接下来几个月的时间都不需要为引入新人而操心，所以这一举动被大家默认是合理的。\n 项目经理和产品经理，不管怎么说，它们是门槛非常低的岗位，基本是个人都能做，做好做坏且不论。如果这个人再经常给大家买买零食，帮大家跑个腿，基本团队的所有成员都不再嫌弃他。中国人普遍对弱者都很善良，强者很多时候还以能维护弱者的生存为荣耀。但弱者有时候却以此为耻，并不会还有任何感激。\n 示例 3\n一家非常有前途的初创公司，开发人员数量往往短时间内会大幅增加，一般这种情况下，他们会提拔在公司工作时间最长的开发人员作为组织架构中的团队负责人。这些人的编码质量仅仅可以超越小学生的编程水平，但因为他们在公司工作时间最长，忠诚度最高，所以得到提拔。一般他们的工资也是最低的，他们接受这种工资，因为没有人愿意为他们的技能支付更多。\n 愿意拿最少的工资，以彰显团队的稳定团结，对团队的文化建设、文件继承也算是有价值啦。\n 示例 4\n在创业公司，团队中有两种类型的人：满不在乎的人和想把事情做对、做好的人。在与无知的管理人员，和团队中的不良成员进行了几个月的斗争后，所有优秀的开发人员都会辞掉了工作。猜猜谁会被提拔起来管理新团队？\n 劣币驱逐良币这个现象，全世界都存在。并不是像某些书或人讲的，中国人有劣根性，所以很难管，不是的，这些都是弱的管理人员在管理不好的时候，编织的一些借口。\n 示例 5\n一位非常糟糕的软件开发人员，因表现不佳而被解雇，他起诉公司并且还获胜了。他的理由是，在所有开发人员中，他每天编写的代码行数最多，所以他做的工作最多。他说的是事实，他的同事将他的 8000 行代码类重构为 230 行。后来公司给了他一年的工资，作为他答应辞职的条件。\n 可笑的是，那些真正想把事情做对、做好的人，他们往往一怒之下就主动离开了团队，没有得到任何补偿。这一般是因为，他们相信自己很快就能找到新工作，并且也不屑于做一些他们认为卑鄙的事。而另外一些人则不是，他们因为害怕，而主动学习并实践到了许多非工作方面的生活技能。\n 示例 6\n一个糟糕的开发人员总是向管理层抱怨，其他开发人员强迫他参加代码审查。原因很简单，他是整个团队中唯一一个编写糟糕代码的人，他每次提交代码都会导致项目混乱。过了一段时间，他说服管理层，代码审查是浪费时间和金钱的，不进行代码审查将为公司节省很多成本，可笑管理层相信了他的鬼话。他先成为了团队负责人，继而又成为了部门负责人，因为所有优秀的开发人员都在他升职后的几个月内辞掉了工作。\n Code Review 是一项非常好的团队文化举措，它可以促进团队保持公平、公正和透明的规则，也可以促进成员之间相互主动学习。当然推进的时候肯定有阻力，这时候就是考验管理层水平和意志力的时候了。\n天下的乌鸦都一样黑，美国的月亮也不比中国圆。在研发管理上，中外小团队面临的问题我相信都是类似的。\n 示例 7\n一家快速发展的 IT 初创公司肯定需要很多新人，所以他们雇佣了大量的软件从业人员。每个不是写程序这块料的开发人员，都被提升为项目经理或销售代表，极少的人转到营销、设计团队，只有很少的一部分人从事软件开发工作。\n 任何时候软件开发的门槛都是存在的。\n 示例 8\n在许多情况下，团队领导和项目管理人员，将缺乏足够沟通能力的弱编程人员，转移到数据分析师、软件设计师、软件架构师等岗位或角色。\n 架构师在国内其实一个受人追捧的角色，没有想到在国外，它是一个像产品经理一样夸夸其谈的角色。很多时候架构师确实只是在说，并不是在做，尤其是业务架构师。\n 示例 9\n在较大的公司中，开发人员总是来来去去。通常，优秀的开发人员会离开以获得更高薪水的工作，而弱的开发人员会留下来，因为他们找到了一份自认为不错的稳定工作，并获得了他们满意的薪水。几年后，弱的开发者成为了团队唯一的老员工，所以他们是最先得到晋升的。\n我还有很多例子。没有必要把它们都写出来。基本就是，如果您是弱程序员，那么您仍然很有可能获得一份好的工作和高的薪水——通常比一个好的程序员还更好，还要高。如果你是一名优秀的程序员，你可能不会得到晋升，因为你是团队里干活的主力，如果公司提拔你，就没有人能把事情做好了。\n你可能会觉得这很奇怪，但确实很少有公司像谷歌、Facebook、亚马逊等那样重视他们的开发人员。在大多数情况下，软件开发人员被认为是高薪的互联网民工，他们的薪水是研发团队最大的支出成本，管理层认为必须加强管理，以最大程度榨取他们的剩余价值，例如 996、007、末位淘汰机制等。很少有开明的老板愿意把好的开发人员，真正视为团队的财富而细心呵护。\n后记\n我看到这篇帖子还是有点小震惊的，以前总有人说，中国和国外不一样，中国是人情社会，不能照搬研发管理的那一套。其实在软件的研发管理中，中外遇到的问题是相似的，国外的月亮也没有那么圆，国内土生土长的程序员也没有那么不堪。\n**最后，向所有一直在岗位上把事情做对、做好，以后仍然想做对、做好的程序员致敬，无论厂子大小！**也向自己致敬，我一直都是这样走过来的。（关于团队管理，客观讲我认为它是计算机世界客观存在的一种事物，必须按照软件研发管理的科学理论认真对待，并不是什么旁门左道。）\n参考\n  https://www.quora.com/Where-do-weak-software-developers-work/answer/Tomislav-Turalija  "},{"id":11,"href":"/posts/2022/1006-2.html","title":"什么样的故事才会显得真实？？","section":"Posts","content":"什么样的故事才会显得真实？ #  故事都是假的，都是人为编出来的，但是有的故事就显得真实可信，这是为什么呢？下面这位编辑的话给了我启发，故事是否真实存在并不重要，关键在于是否充满曲折离奇的情节。一旦作者准备这么做了，还要注意避免下面编辑提到的四项。 ​ 下面是编辑的话：​\n 我在回复中提到「故事的编造痕迹比较重」，作者会很认真地告诉我，这是生活中的一件真事，我当然相信他的话，我所说的编造痕迹也不是说这个故事是编出来的，而是说故事给你假的感觉。\n故事是可以虚构的，而且好的故事都有很多成分是虚构的，但这种虚构是有生活基础的，我们常说文学艺术作品「源于生活，高于生活」就是这个意思。读者不会在意你这个故事本身是真的还是假的，只会在意情节的合理性，这个「理」指的就是「艺术真实」。\n什么是「艺术真实」呢？一定要「出人意料」。所谓「出人意料」也是指一种情节逆转，我们常说的故事的尾巴要「翘一翘」，也就是「意料之外」的意思。情理之中与意料之外这两者必须结合起来，缺一不可。不能达到「意料之外」，故事显得平淡；不能做到「情理之中」，情节又显得生硬。\n那么，为什么有的作者的故事情节已经写得千变万化非常曲折了，而编辑仍说情节不够好呢？我想或者有以下几个原因：\n一，是情节的转折始终按照常理发展，虽然一直在变化，但大家都能想到，也就没有什么稀奇的了；\n二，是情节的发展始终按照讲述者的意愿进行，给读者的感觉是不是人物之间矛盾冲突的自然发展导致了情节的发展，而是写故事的人想到哪里写到哪里，这样的情节曲折同样是没有吸引力的；\n三，是缺少有特点的细节，缺少细节的情节永远是干瘪瘪的，一个故事若能有一两出有生活气息的、有特点的或者是有趣的细节，情节立刻就会饱满起来。\n四，是情节没有围绕一个统一的线索发展，情节虽然曲折，但写得不集中，写到另外的事情上去了。\n 这位编辑总结的四点：故事要曲折，情节不能随便让人猜到；情节发展要由人物间的矛盾自然推动；要有细节；是复仇还是寻宝围绕一条主线展开，我觉得做到这几点，基本上故事就显得真实了。\n"},{"id":12,"href":"/posts/2022/1006.html","title":"学到的技术知识，在使用的时候总会忘记，如何将它们牢记于心？","section":"Posts","content":"学到的技术知识，在使用的时候总会忘记，如何将它们牢记于心？ #  今天看到一位国外前端程序员，他分享了一个这样的学习体验：\n 当我开始学习 HTML 和 CSS 的时候，当我想使用刚刚学到的东西时，我总是忘记我学到的东西。我不知道怎么做才能将它们牢记于心？\n 遗忘是正常现象，再熟悉的编程语言如果一年半年不写也会变得生疏。他给出的建议是，与其牢记，不如理解和实践。\n在刚学习的时候，总是不能随心所欲去构建那些激动人心的 Web 程序，会感觉很沮丧；一步一步跟着教程去做，是可以依葫芦画瓢做出来的，但一旦遇到新问题，一放到实际项目中就傻眼了，这很正常。\n这时候除了安慰自己，还可以动手记一些笔记，将理解和实践的东西一一记下来。不必在意自己有没有牢牢记住，持续坚持学习，相信有一天，大概在三四个月以后，便开始能马上理解学习的内容了，甚至还能预测课程中的内容。这时候有些东西已经发生了变化，这可能意味着自己已经跨过了某些障碍，一些零散的知识点也开始在脑海中结成网络。\n这是一个从量变到质变的过程。从非程序员，到程序员，这绝对是一个质变，这样的质变绝不是一朝一夕可以完成的，初学者花费三四个月，甚至半年的时间是合理的。\n要注重理解和实践，而非死记硬背，还有，就是放平心态，给自己足够的蜕变的时间。这便是来自这位国外程序员的学习经验，我觉得它至少会对一部分人有效，分享给你。\n"},{"id":13,"href":"/posts/2022/1005.html","title":"PBL网文小说与技术实战图书写作流程模板：不同的类型，相同的创作流程","section":"Posts","content":"PBL 网文小说与技术实战图书写作流程模板：不同的类型，相同的创作流程 #  PBL 网文小说：\n 0，要有一个主题（例如成长环境对人性格的影响「射雕英雄传」，爱情「神雕侠侣」） 1，依据主题，确立一个故事大纲（例如「神雕侠侣」中的各种恋爱类型：养父养女恋、师徒恋、同门恋、姐妹恋、大叔小妹恋等） 2，根据大纲，调查与收集多个故事示例 3，将多个故事示例整合到一起。情节不通的，想办法编撰情节串起来 4，反推，做减法，到第一节 5，从第一节开始撰写（在这里就可以连载了） 6，最后是修订润色，相当于再版修订  同样的 PBL 实战课程是这样的：\n 0，要有一个主题（例如小程序优化） 1，先确定一个知识点大纲 2，依据大纲，依次构建所有示例 3，将所有示例整合到一个项目中 4，将 PBL 项目反推剥离，到第一节 5，从第一节开始撰写（这个时候就可以连载了） 6，最后是润色修改  这套模板目前仅在实战课程中有实际运用，在网文小说写作中还未曾应用，因相信该模板而在小说创作中遭遇扑街由私淑者自己负责。\n"},{"id":14,"href":"/posts/2022/1004-2.html","title":"一个公司怎么保持自己良好的价值观，例如公正、透明、唯能力尊而非职位？","section":"Posts","content":"一个公司怎么保持自己良好的价值观，例如公正、透明、唯能力尊而非职位？ #  只靠招人时严格的筛选，显然是不够的，在日常管理中，还要主动维护价值观，做到奖惩分明。\n举个例子，我们都知道公司业务要发展，就需要不断根据时势革新和进取，而有些人他们其实是保守派，他们在公司中的工作可能也是与业务增长无关的，例如运维、客服等这些属于支持型的只能部门，当你提出一个很好的想法，需要他们配合作出某些改变时，他们会义正言辞地给你提一堆反对意见，并且很多建议还能站在公司的角度自圆其说，让你无法反驳。\n这些人进得公司来，可能只是想镀镀金，混两年拿一些股权走人，他们的职场哲学就是明哲保身，一般他们被称为职场老油条。这个时候，公司的文化部门就必须发挥作用了，当这种苗头出现的时候，必须惩罚和压制，支持进取派行动。但如果一个公司，有很多高管他们都是保守派的，他们看清了他们即使再努力工作几年后结果也是被优化掉，他们也会选择躺平，甚至连公司的文化部分都已经躺平了，这种情况基本就没得救了。\n这是一种大公司病，像腐败一样，想变坏很快，想变好却很难。\n职场遇到这种情况，是不是一定要马上离开？看情况，如果还有进取机会，就再暂且忍耐一下等待时机；如果看不到一点机会了，还是选择离开把。\n"},{"id":15,"href":"/posts/2022/1004.html","title":"代码模板与武侠小说的情节套路：可以复用，以加快编码和小说创作","section":"Posts","content":"代码模板与武侠小说的情节套路：可以复用，以加快编码和小说创作 #  代码模板是一种可以填空或在其基础上改写的代码范式，可以在一定程度上帮助程序员加快写代码的速度，减少重复枯燥的键盘操作。在小说中也有类似的情节套路与之对应。\n金庸先生自称在写每一部小说时，都要力求有些变化，要故意写得不一样，但这并不是说金庸的小说没有重复。相反，金庸先生这样想反方向用力，恰恰说明是存在重复的，且这种重复很容易发生的。\n下面列两个例子。在「神雕侠侣」中，郭襄将要过生日，突然有百草仙等陌生人向她送很多珍贵的贺礼，这些礼物让郭靖和黄蓉都感到吃惊，以他们二人都未必有这么大的面子；对比在「笑傲江湖」中，令狐冲受伤，随师门同行，不断有陌生人主动上前送很多珍贵的药材和礼物，连岳不群夫妇都觉得没有这样大的面子。在「射雕英雄传」中，黄蓉初识洪七公，想甩下七公，却不料每一次反而让七公跑到了她的前面；在「神雕侠侣」中，郭襄想甩下金轮法王逃走，每次都发现金轮法王早已经跑到了她的前面。相信类似的套路还有很多。\n类似的武侠小说中这样的情节套路，是可以像代码模板那样复用的。代码模板在使用时，关键信息是有修改的，不是全部代码都一样；情节套路在复用时，也是与角色、当下故事情节契合的，也不是完全照搬，所以读者也不会感到明显的重复。\n"},{"id":16,"href":"/posts/2022/1003.html","title":"为什么 Google 很强？","section":"Posts","content":"为什么 Google 会很强？ #  资本总是想榨干员工和机器的每一点剩余价值。如果那一天服务器有了意识，一定会揭竿起义。\n服务器和人一样，基本白天干活晚上休息，有时候白天非高峰时期也是休息的。程序员为了榨干机器的每一点价值，发明了一种叫统一调度的东西，Google 在这方面走在了世界的前列，搞了一个 Borg。\nGoogle Borg 是一套资源管理系统，可用于统一管理和调度资源，目的是充分利用服务器的计算资源。例如大数据计算中心和对外 Web 站点，前者计算密集，后者计算稀疏，两者就可以结合起来统一调度，最大程度不让机器闲置。\nGoogle 服务器的统一调度利用率据说达到了 60%，是目前的天花板。大部分公司，特别是中小公司的服务器，包括你自己的云服务器，10% 的利用率都不到。但是你可能付了 10 倍的钱，如果你的服务器是包年包月的话，意味着 9 成的钱都白付了。\nFackbook 不搞统一调度，据说因为他们的网站是全球网站，全天 24 小时提供服务，不存在时差浪费。这个理由有点牵强，Google 更是全球网站，为什么 Google 要搞统一调度？很大可能 Fackbook，或者说 Meta 现在也在搞了，只是我们不知道。\nGoogle 总结自己的核心竞争力，有两条：1，搜索排名比别人精准；2，机器利用率是别人的 1/10。这就好比东西比别人好用，成本还是别人的 1/10，Google 强大果然是有道理的。\n"},{"id":17,"href":"/posts/2022/10032.html","title":"端正认识，保持自信和平常心积极对待：关于中小团队研发团队管理的一点看法","section":"Posts","content":"端正认识，保持自信和平常心积极对待：关于中小团队研发团队管理的一点看法 #  看一下淘宝架构体系的演进路线：1.0 PHP，2.0 单体 Java，3.0 分布式 Java，4.0 异地多活。大淘宝一开始的架构也不是光鲜与靓丽的，所以对于初创团队，开始只有几条破枪，技术架构也是修修补补，这没有什么，这都是正常的。\n先说运维方面。当业务增长到一定程度，服务器增长到一定程度，专业的运维团队必然出现，运维与研发的矛盾也必然会凸显出来。像阿里这样的企业，你很难想象它的运维团队竟然暴力解散过，然后以个体分散到了各个研发团队中。到后来，仿照 Google SRE，阿里又建立了自己的 SRE 团队，专门负责服务器的安全与稳定。而配置、部署和发布，这些工作全部交给了研发人员自己处理。\n再看研发方面。研发团队大到一定程度一定会产生管理问题，例如子系统多了，边缘问题无人修复。淘宝比较幸运，他们员工民间搞了一个消防队，专门用于救急灭火。\n一个公司能不能成长起来，跟很多因素有关。在成长过程中，会遇到很多矛盾，管理者能解决这些矛盾，组织就能成长，公司就能发展，反之就会深陷泥潭。为什么你的组织不能产生消防队？这可能与公司的文化有关，与管理者的价值观有关。管理者要反思，有没有任人唯亲，有没有两面三刀，头没有公私不分，有没有赏罚分明？\n研发效能变差和组织协作变差，80% 都败于公正和透明。与其说管理者的职责是管理，不如说管理者的职责是维护公平、公正，是激发和保持团队向上的信心。\n"},{"id":18,"href":"/posts/2022/1002.html","title":"为什么技术初创团队和大厂都选择开源？","section":"Posts","content":"为什么技术初创团队和大厂都选择开源？ #  开源不就是把辛辛苦苦写出来的代码免费分享给所有人吗？你会不会觉得这样做的人是傻子，为什么大厂和初创团队还争相恐后去做这件事情？2022年了，国内程序员如果看不懂这个想象，就不要盲目去创业。\n先看大厂的动机。最开始大厂是不选择开源的，当团队走到前沿，触及某个前沿问题时，最先想到的是自研。甚至外界有不错的开源产品都会忽略掉，一定要自己开发，把控制权牢牢把握在自己手里。\n同时大厂如果收购小公司，或融入开源社区，必须在自研产品中向开源产品做兼容，这个过程据经历过的人说，是很痛苦的。\n开源软件一旦起飞，一定会形成一个非常健康的社群，发展会越来越快。不要以为大厂自研的产品发展一定会很快，比外面还快，其实不是的。大厂程序员本身也是一个一个的个体，是没有办法与众多大厂的程序员做抗衡的。何况当下国内大厂还是看国外的 Fackbook 与 Google，还没有到完全引领世界的地步。\n所以，大厂自研产品的结果，就是被迫向开源产品兼容，甚至用开源产品替代。既然如此，何必当初要自研呢？\n再看初创团队。小团队最怕的是，好不容易开发了一个有价值、用户能快速增长的产品，结果被大厂抄袭了。大厂有更广阔的用户市场基础，有雄厚的资金，有聪明的工程师，小团队怎么可能竞争得过。\n所以，以往小团队的命运都很悲催，要么被大厂赶超，要么被大厂收购。收购其实还算是一种不做的结局啦。\n那么小团队就没有发展起来的机会了吗？\n也不是。小团队怕大厂，但是大厂怕开源啊！小团队在产品初具雏形时，完全可以把产品开源出来，挟社区以对抗大厂。\n \n2018 年 6 月 4 日，微软为什么花 75 亿美元收购 Github？微软看中的，正是 Github 上那些开源项目背后的程序员和开源社区。人人都以进大厂为荣，但大厂最忌惮的却是开源社区，而开源社区里面是一个个活生生的人。\n"},{"id":19,"href":"/posts/2022/1001.html","title":"写博客对个人找工作有什么帮助？","section":"Posts","content":"写博客对个人找工作有什么帮助？ #  听 阿里P10大佬毕玄找工作的经历，发现作为一名非计算机专业的生物系学生，写博客数次给他找工作带来了直接帮助。\n在他想换工作时，被满江红站长推荐给淘宝。三面下来，面试官问他这个问题，不会，问那个也不会，让他做题，也没有做出来。但最终，他还是被录用了。为啥？\n大概有两个原因：\n（一）淘宝当时想做的分布式系统，淘宝人自己也不是很明白，还处于探索中。而毕玄通过撰写 OSGi，已经对——至少看起来已经对 OSGi 很了解，淘宝需要这样的人。\n现在其实很有公司招程序员的时候，招的都是带有创新性的职位，面试官问什么可能只是他想问，与职位没有必然关系。作为面试者对于自己不了解的问题，也没有必要强答，自信一点，会就答，不会就说不会。认清自己的核心优势，放平心态，没有通过面试是这个职位与自己不匹配，坚持做自己就好。\n（二）面试者毕玄还是很聪明的，他作为全省重点高中班的学生，智力的光芒不可能完全在面试官前藏得住。\n所以现在 HR 筛选人，最简单粗暴的方法就是卡学历，利用传统的应试教育减少自己的劳动量。除了学历，还可以用智商测试卡，有的公司面试不是做算法题，而是做智商测试卡。这样做的目的，在于为团队找到聪明的人。\n现在写博客还有机会吗？\n现在仍然有很多人在写博客（或者公众号），效果因人而异。\n写博客不能乱写，写别人写过的，甚至抄袭，这都是没有意义的。写博客重在发出自己独一无二的声音，在于打造自己独特的影响力。作为程序员写博客，要关注前沿技术，要写那些可以引领他人、甚至可以影响他人前进方向的内容。归纳一下，有两方面的内容值得写：\n（一）翻译国外前沿的技术内容；\n（二）针对社区中的前沿问题，给出自己的独特见解。\n 什么是 OSGi？\n是 Open Service Gateway Initiative 的简写，翻译为汉语是开放式服务网关倡议，是 Java 动态化模块化系统的一系列规范，目的是实现不同功能的 Java 模块在复杂系统中的复用。Eclipse 是插件化的，是完全建立在 OSGi 框架之上的。Eclipse 插件之间如何协作，是靠 OSGi 规范进行协作的。\n"},{"id":20,"href":"/posts/2022/10012.html","title":"程序员的三个阶段与产品开发的两种哲学","section":"Posts","content":"程序员的三个阶段与产品开发的两种哲学 #   很多时候我们纠结，不知道如何选择，只是因为我们忘记了有当下处境这个变量。把处境考虑进去，所有问题都不会纠结。而如果没有处境，也没有产生纠结，这多半已经坏了，一定是我们看问题还不够全面。一个真正的问题，一定是充满矛盾，可以让我们说上一整天的话题。\n 人生的三个境界 #  汪国真说人生有三个境界：\n 第一境界，昨夜西风凋碧树，独上高楼，望尽天涯路； 第二境界，衣带渐宽终不悔，为伊消得人憔悴； 第三境界，众里寻他千百度，蓦然回首，那人却在灯火阑珊处。  这应该是有能力上升到第三个境界的人，才能拥有的境界，对于大多数的人，第一个境界都不会觉醒，更不要说到达第二、第三境界了。\n程序员的三个阶段 #  今天听毕玄分享在淘宝做 HSF（High-speed Service Framework，是在阿里广泛使用的一个分布式 RPC 服务框架）时的经历，他将程序员生涯划分为了三个阶段：\n 掌握了技能，可以快速进行业务开发的第一阶段； 善于解决问题的第二阶段； 善于将问题规避于无形之中的第三阶段。  其中第二个阶段提一下。据说淘宝内部系统在增长到 100 个以后，在出现线上问题时，已经没有人明确知道是谁的问题并能推动问题得到处理了，这是大公司发展到一定程度就会出现的研发管理问题。幸运的是，当时淘宝有一帮聪明人，在一个运维人员的倡议下，他们建了一个内部群，这个群只能开发人员进入，多事的管理者不能进入。这个群存在的意义在于，它可以绕过一些规定，而快速定位和解决线上问题，而随着能解决的问题越多，也有更多的问题被投放到这个群里，这个群自然而然也变得重要起来\n毕玄大佬提到的程序员第二阶段，就是在这样的一个群里成长起来的程序员。想要快速定位和解决问题，除了要先绕过一些腐朽的规定（例如后端的库前端不能访问，生产环境不能随便登录等）以外，更重要的是，要有扎实的计算机基础知识，要有广泛的技术知识积累，还要有敏锐的观察力。\n第二阶段或许可以通过故障演练习得，但人为的故障演练的真实性和强度总是差一点；或许也可以通过阅读其他公司的事故报告而增加实践经验，但很少有公司愿意全盘分享自己的濒死经历。\n第三个阶段可以通过经历第二经历而成长起来，然后在失败中总结经验，把代码写得鲁棒性更好、性能更好；也可以通过阅读，直接学习牛人总结的最佳实践。\n扁鹊大哥医于未病 #  现在看一下《鹖/hé/冠子》世贤第十六篇，魏文王问扁鹊，他兄弟三人谁的医术最高。扁鹊说，他大哥的医术最高，他自己的最差。魏文王诧异，扁鹊解释说：「长兄于病视神，未有形而除之，故名不出于家。中兄治病，其在毫毛，故名不出于闾（lǘ，古代行政单位，周朝 25 户为一闾）。若扁鹊者，血脉、投毒药、副肌肤间，而名出闻于诸侯。」\n什么意思？大概是说，他大哥在病还没有爆发的时候，就已经消灭了；他二哥是发现病刚有点苗头，就把病治了；而他自己，总是在病爆发的时候才施手治好。\n这可能是扁鹊自谦，不过没有关系，这个故事可以帮助我们理解程序员的三个阶段。如果将扁鹊三兄弟对应于程序员的三个等级，是这样的：\n 扁鹊处于第二阶段，善于定位与解决 Bug； 扁鹊二哥处于第二、第三阶段之间，Bug 还没有机会爆出，就被他重构掉了； 扁鹊大哥是第三阶段，预防 Bug 于写代码之时，所以外面没有人知道他的厉害。  我们将程序员划分为三个阶段，而并不是三个等级，因为人的技术水平是会不断进步的。开始的时候是第一阶段，过一段时间可能就是第二、第三阶段了。能进入第一阶段的人，在接触到足够多的生产案例以后，也能步入到第二阶段；到达第二阶段后，稍加总结经验，也能步入第三阶段。或者直接从第一阶段学习最佳实践，先记下来并应用上，有人东西不懂也没有关系，先照做，在实践中慢慢会发现，哦，原来这个地方这么做是这个用意。\n对于扁鹊，我更相信，很多时候并不是他不能医于未病，而是很多人病了之后才找他医治。对应于中小公司的开发，不一定是他们不懂得优化，很多时候他们更愿意牺牲性能和鲁棒性，而攫取更多的开发效率，毕竟生存大于一切，时间大于一切。\n面向不同读者群体的内容定位 #  当我们开发项目而进行技术选型时，我们应该选择脚本语言，还是应该选择编译型语言？我们应该使用跨平台的多段框架开发产品，还是应该分别在不同平台使用不同的原生技术开发产品？包括我们作者，在撰写相关的计算机图书时，我们应该如何界定一本书的读者群体呢？\n这里涉及到两种开发哲学：\n 一，尽快完成，用最快的效率先完成功能； 二，最大程度考虑到性能，将性能和稳定做到极致。  对于中小公司，一般就是求快，先完成再说，所以他们倾向于选择脚本语言、选择跨平台的一站式开发框架。对于已经拥有高并发用户的大公司，他们倾向于选择编译型语言，将性能、鲁棒性、稳定性放在第一位考虑。\n我们没有必要纠结要选择那种哲学，抛开团队所处的具体处境，而谈策略的选择是没有意义的，在艰难求生阶段，自然一切求快；而到了已经拥有大量用户和订单的阶段，自然求稳。\n并且这两种生存哲学也不是矛盾的，团队开始起步的时候选择求快，后续发展起来了再选择求稳，都是正常选择。千万别自个跟自个别扭，在还没有达到温饱的时候就大搞优化；在应该求稳定的时候，又以敏捷开发和小步快跑要求自己，当开发进度和交付结果不如意的时候，又埋怨说：”多想回到刚开始创业的时候，那时候我们 3 小时就发布一个版本。“\n呵呵，那个时候应该还可以更快，3 分钟就可以发布一个版本，因为根本没有用户嘛，什么问题都不会显现。联网软件，用户在 1000 个、1 万个、10 万个、100 万个、1000 万个的时候面临的问题是不一样的。所有的资源都是有限的，只有资源消耗大的时候，一些问题才会暴露出来。\n当作者在写书时，也没有必要纠结应该选择定位哪一类读者。开发者都是会成长的，今天他们要求快，明天可能就求稳，如果明天他们还活着的话。\n在任何时候，考虑任何问题，都应该把当下处境考虑进去，这是辩证法的基本原则。\n"},{"id":21,"href":"/posts/2022/10013.html","title":"阿里 P10 带多少人与公司里做事的出发点应该是什么？","section":"Posts","content":"阿里 P10 带多少人与公司里做事的出发点应该是什么？ #  P10 带多少人？ #  一般来说，在阿里 P 是技术系，M 是管理系。但 P 也是带人的，例如阿里 P10 毕玄在 访谈中透露，他在淘系曾带 600 人。我查了一下，其他等级例如 P9 大概带 50~100 人，P8 带 2~30 人。P7 是技术专家/架构师，应该是不带人的。\n各个技术等级是这样的：\n   等级 职称      P5 高级工程师 校招起点   P6 资深工程师 社招起点，1~3 年工作经验，代码主力   P7 技术专家/架构师 5~7 年工作经验，代码主力   P8 高级技术专家 一线最高级别，带 2~30 人   P9 资深技术专家 有行业影响力，带 50~100 人，可以权衡架构方案利弊   P10 研究员/科学家 有行业影响力+有影响力的成果，带 100~1000 人    行业影响力一般指有粉丝多的博客/公众号/视频号，出版过技术图书，在维护知名的开源项目等。在这个层次只是走到了技术前沿，但没有走过前沿。\n有影响力的成果一般指出版的图书，或开源项目，或其他专利成果等，获得了一定的市场认可，已经走过了技术前沿，已经有创新了。到达 P10，相当于计算机领域没有学位的博士。\n在公司里做事的出发点 #  出发点在职场中很重要。公司中总是充满各种矛盾，如果下属与上级之间一直没有分歧与争执，这多半是有问题的，这只是意味着矛盾被忽略或隐瞒了，没有被真正对待和解决。\n下属与上级对话，一个很重要的原则是：出发点始终站在公司这边。你可以站在所在团队的立场，与上司谈要求，这种情况有时候能成有时候不能成；你也可以站在事业部或分公司，站在你的上司所在的单位谈，这种情况下也并不能保证 100% 成功；你还可以站在整个公司、整个集团的角度谈，从这个角度可能也不能如愿，但一般不会失败。\n程序员个人做事，与在公司里做事的立场是完全不同的。个人开一个开源项目，出发点可以是藉由项目实践完善自己的技术体系，也可以是实现自己的一个技术设想，或者为社会上的一部分人带去实用价值。在公司里做事不是这样的，只有将出发点放在公司这边，才能一直顺风顺水；如果在公司里做事，仍然坚持个人做事的出发点，是早晚会出问题的，很多程序员因为太痴迷于技术，往往无意间忽略了这一点。\n"},{"id":22,"href":"/posts/2022/0930.html","title":"为什么编程里习惯使用 i、j、k 等作为循环变量?","section":"Posts","content":"为什么编程里习惯使用 i、j、k 等作为循环变量? #  i 可能是 integer 的简写，或者是 int 的简写。有人说是 iterator 的简写，这个有点牵强。早期教材中的示例都是以 i、k、j 作为循环变量，后来这样使用成为了一种习惯。\n但这种习惯是如何形成的呢？\n在 1957 年诞生的 Fortran 编程语言中，有一个「I—N 规则」，规定以字母 I，J，K，L，M，N 六个字母开头的变量，如无另外说明均为整型变量，以其它字母开头的变量则为实型变量。实型变量在这里狭隘理解就是小数，包括指数形式的小数。\nFortran 更多是一种教学语言，后来诞生的 B 语言、C 语言都借鉴了 i、k、j 的命名规则，久而久之成为了习惯。\n 关于 I-N 规则，可以查看这里：https://micro.ustc.edu.cn/Fortran/ZJDing/Sec1-4.htm\n Fortran 支持整型、字符型等类型。Fortran 诞生于 1957 年，比 C 语言早了 10 年，很难想象在远古编程语言中，竟然就有了对变量类型的支持。虽然对类型的支持并不是一开始就有的，但也基本发生在 Fortran 诞生之后的几年里。\nJS、Python 这样的脚本语言没有变量类型，并不是它们低级，而是在它们的语言哲学里，没有类型更加简洁方便。\n编程语言一向有两个发展方向，两种哲学：\n 一，力求简洁，代码编写效率高，脚本语言基本都是这样，例如 Python、JS； 二，力求高性能、安全与稳定，后端编译型语言基本都是如此、例如 Java、C++。  一般情况下，我们都会保持这种语言中哲学的纯粹，但有时候我发现我们开发者又很矛盾，例如 JS，它本来是弱类型的脚本语言，当我们在享受它简洁方便的语言特性时，又搞了一个 TypeScript 出来，希望它也像 Java 那样具有强类型的严谨。\n就像一个姑娘，有时候希望她泼辣，有时候又希望她文静。\n有一个语言，因为诞生的晚，吸收了众多现代语言的优点，既有强类型语言的优点，又有弱类型语言的优点，它就是 Go 语言。\n"},{"id":23,"href":"/posts/2022/0926.html","title":"为什么有经验的程序员对 Python 有这么多仇恨？","section":"Posts","content":"为什么有经验的程序员对 Python 有这么多仇恨？ #  并不是所有有经验的程序员都讨厌 Python，促使人们产生这种厌恶情绪的原因可能有三个：\n1，Py 不能很好地进行 OO 编程。这是由于 Py 诞生太早而决定的，在 Py 诞生的时候，OO 编程思想还没有成熟，经典的设计模式图书 GoF 还没有出版。关于对 OO 编程的支持，Py 3 中已经有所改进，但因为又要向前做一些兼容，还不可避免地戴了「历史的脚镣」。\n2，Py 被指是一种「石头汤」，像一个众人贡献的大杂烩，没有计划，没有规划，像是野蛮生长而成的。这是由它的生存哲学所决定的，Py 没有「我执」，开发者需要什么，它就添加什么；社区贡献什么优良的类库，它就吸纳什么。正是这种「海纳百川，不舍涓流」的精神，让 Py 存在了这么多年，为这么多人所使用。\n3，Py 没有严格的静态类型。但这是它的缺点，同时也是它的优点。是灵活？还是严谨？对于脚本语言，取灵活就好了，否则还不失去了脚本语言的本色？至于严谨，是后端编译类语言应该考虑的事情。\n结论：Py 是一门非常值得学习的脚本编程语言。\n"},{"id":24,"href":"/posts/2022/0913.html","title":"二极管工作原理，及计算机内电信号是如何向数字信号转化的？","section":"Posts","content":" 数字信号纯粹是给我们人类阅读和理解用的，在计算机的物质世界里，就是不同的具象化形态。这和我们人类的「意识」很像，人到底有没有意识？人的意识就像计算机世界的数字信号一样，其实是不存在的。当医生把死人的大脑打开的时候，和我们把磁盘打开看到的东西是一样的，什么也没有。\n 二极管工作原理，及计算机内电信号是如何向数字信号转化的？ #  二极管的工作原理是什么？\n还有这三个问题：\n 机器指令（整数）是如何转换成高低电平，从而被硬件识别？ 计算机最底层的机器语言是如何变成物理电平信号输给 CPU 的呢？ 程序里 0 和 1 是怎么转化成高低电平的？（最初的受 0 和 1 控制的高低电平如何产生的）？  这三个问题本质上是一个问题，并且，和二极管的工作原理是密不可分的。\n什么是半导体？ #  首先看一个物理概念，什么是半导体？\n能导电的，材料中有自由电子可以流动的，是导体，例如铜线、铝线；反之，不能导电的叫非导体，或者叫绝缘体，例如包裹在手机充电线外层的塑胶，没有这层塑胶，我们可能都无法给手机充电。\n自然界的物质，除了导体、绝缘体，剩下的就是半导体。半导体源于材料的导电性质会发生变化，例如硅（Si）、锗（Ge）及砷化镓（GaAs）等，它们的原子会随着温度的升高，而出现易于移动的价电子，从而具有导电性。\n半导体按物质是否纯粹还可以分为本征半导体和杂质半导体。高度提纯的硅（Si）便是本征半导体。硅具有稳定的 4 阶电子，在本征半导体中加入一些 3 阶电子物质（例如铟或铝），或 5 阶电子物质（例如磷），便变成了杂质半导体。\nCPU 是计算机的核心部件，它的主要生产原料是高度提纯后的硅，这种原料在自然界并不存在，为了得到它，人类必须将海滩上的沙子一遍一遍煅烧，才能得到它。然而在得到高纯度的硅以后，还要想办法掺入一些杂质，使它变得又不纯粹了。提纯与掺杂，都是为了同一个目的：制造晶体管半导体电子元件。\n晶体管包裹二极管、三极管、场效应管等多种类型，原理是类似的，可以从二极管上理解它们。那么一个二极管是怎么构成的？它的原理是什么呢？\n二极管的构成 #  如下所示，一个经典的二极管从左到右由正极（导电金属）、P（Positive）型半导体材质区、PN 结、N（Negative）型半导体材质区和负极（导电金属）组成。\n图 1\n正极和负极都是导电金属。P 和 N 是两种杂质半导体。PN 结不是一种材质，或者说不是人为制造的材质，它是由 P、N 两种材质连在一起时，自然形成的。图示中 PN 结看起来很宽，事实上它非常窄。在二极管中同时使用 P、N 两种杂质半导体就是为了产生 PN 结。PN 结是电子计算机最原始的物质基础，没有 PN 结就没有电子计算机。\n如下所示，这是现实世界中的二极管。后两个像灯泡一样，它们还可以发光，本质上它们还是二极管，只是在二极管有电流通过时可以亮起来而已。\n图 2\n二极管的工作原理是什么？ #  下面看二极管的工作原理。\n平衡是一种美，尤其在物理世界中，物体或材质总是尽力想办法保持平衡。例如电，电是怎么产生的？本质上是电子的移动对不对。那电子为什么要移动？还不是因为一边的物质缺少电子，另一边的物质自由电子太多，从而发生了自由电子的移动。可以自由移动的电子有时也称作载流子，两边物质载流子的浓度相差越大，电压就越大，电流就越大。这是一种简单的对电的理解，稍后对我们理解二极管有帮助。\n下面我们看二极管。\n图 3\nP 型区的材质因为人为地注入了 3 阶电子的物质（例如铟），从而拥有更有可以容纳自由电子的空穴；而 N 型区的材质因为人为地注入了 5 阶电子的物质（例如磷），从而拥有更多自由电子。但是请注意，虽然 P 型区拥有空穴，及 N 型区拥有电子，他们本身都是电中性的，他们本身并没有使用羊毛毡或玻璃棒摩擦过，它们本身是不带电的。\n当它们接触到一起的时候，在它们接触的截面，发生了一些电子移动。如下所示：\n图 4\n右边是 N 型区，左边是 P 型区。在截面处，N 型区的电子会跑到 P 型区，从而让 P 型区截面处的物质带上负电荷，而截面处失去电子的 N 型区物质则会带上正电荷。根据电的一般定义，电场的方向总是从正电荷区域指向负电荷区域，所以在截面处，有一个从右向左的内电场。\n图 5\n但是，N 型区的电子为什么没有一直、全部移向 P 型区呢？这可以从两个方面理解：\n1）如果全部移过去了，那么内电场的电压将达到最大，根据物理世界万物都追求平衡的道理，这种没有地方释放的电压是不可能存在的。\n2）继续看上面的图 4，P 型区的正载流子浓度（红色）从左向右是降低的，相反，N 型区的负载流子浓度（蓝色）从左向右是升高的，两条线在中间，也就是 PN 结的中间，达到了平衡，或者说相等。截面处载流子达到平衡了，电子也就没有移动的必要了。\n在自然状态下，PN 结达到平衡的状态下，PN 结的宽度有多少，本质上取决于 P 型区和 N 型区它们注入的杂质的原子性质及浓度。有的地方写，二极管导通的临界电压是 0.7V，为什么是 0.7V？这与注入的杂质有关，这 0.7V 的电压要克服内电场做功。\n正向偏置和反向偏置 #  正向偏置和反向偏置这两个概念很容易混淆，我们只需要记住二极管在正向偏置下是导电的就可以了。如下所示，这是正向偏置的示意图。\n图 6\n整个电路在外电场的作用下，出现了顺时针方向的电流。电流方向与带负电的电子的运动方向是相反的，在二极管的管体内，电子在外部电场的作用下，会持续从 N 型区跑到 P 型区。此时二极管会有一些热量产生，这些热量是外电场克服内电场而做的功。\n在正向偏置下，二极管中是有电流通过的，如果二极管是发光二极管，将有亮光出现。反之，在反向偏置下，如下所示，外电场方向在管体内，与内电场方向重合了，此时 PN 结变宽了，二极管处于非导通状态。\n图 7\n伏安特性曲线 #  如果我们考察二极管中的电流大小，在正向偏置和反向偏置中的变化，可以得出一条伏安特性曲线，如下所示。\n图 8\n在这条二维曲线中：\n 蓝色表示正向偏置下，正向导通的状态； 红色部分表示即将被导通的状态； 绿色为反向偏置下，反向饱和电流的状态； 黄色表示 PN 结被击穿的状态，电流又变得负向无穷大了。  什么是二极管的击穿态？ #  在反向偏置下，虽然内外电场的方向在管体内是相同的，但当外部电压大到一定程度后，大到中性粒子分离出价电子的程度了，这时候二极管变成了一根导线了，内部小电场丝毫起不到任何的阻滞作用了。\n所以，无论是手机，还是电脑，都有一个适用的最大电压和最小电压。电压太小了带不动，太大了主板又可能被击穿，俗称「烧坏」了。超负荷做功产生大量的热，有时候甚至能闻到绝缘体烧糊的味道。\n电信号怎么转化为数字信号？ #  二极管通电与不通电，其实是一个开关，是电信号。\n有了二极管，就可以设计各种逻辑门电路了，例如与门电路：\n图 9\n它由两个二极管组成，只有 A 与 B 同时都处于导通，也就是正向偏置的状态，L 端才有输出，否则没有输出。注意上方的 R 是一个电阻，电流是不会往这边跑的。\n下面这个是或门电路：\n图 10\nA 与 B 只要有一个输入，L 端就有输出。\n还有其他的逻辑门电路，都可以基于二极管实现。基本的逻辑门电路又可以组成基本的计算模块，例如半加器、全加器等。除了加法器，还有乘法器、除法器、减法器，都可以基于逻辑门电路实现。\n如下所示，这是一个两位加法器的示意图：\n \n图 11\n注意输入和输出都在下方。当输入是 11（3）和 01（1）时，输出是 100（4）。输入相同，输出必定相同。\n现在，我们思考终极问题：电信号是怎么转化为数字信号的？\n其实压根就没有转化，所谓的数字信号（0110 这种）只是我们人类便于自己理解所发明的一种描述。二进制和这个世界上存在的英语、汉语一样，它们只是我们人类具象化的符号而已。\n以我们敲击键盘为例，当我们敲击字母 A 时，产生的 ASCII 码是 65，它的二进制是 1000001，在计算机中就是 1 个高电平+5 个低电平+1 个高电平。这个数据（1000001）如果存在 CPU 的寄存器里，就是一些电子元件的基本状态；如果存在磁带或者磁盘里，就是一些磁信号，那里有什么数字信号？\n数字信号纯粹是给我们人类阅读和理解用的，在计算机的物质世界里，就是不同的具象化形态。这和我们人类的「意识」很像，人到底有没有意识？人的意识就像计算机世界的数字信号一样，其实是不存在的。当医生把死人的大脑打开的时候，和我们把磁盘打开看到的东西是一样的，什么也没有。\n数字信号在计算机内是如何暂存的？ #  前面我们谈到的都是计算用的电子元件，例如加法器、乘法器等。计算后的结果，在计算机内是如何保存的呢？例如在 CPU 的寄存器内，是如何保存的？\n这涉及到触发器元件。以 D 触发器为例，它用于存储一位（0 或 1）数据，它可以做到，无论输入电平是高电平还是低电平，它的输出值保持不变，这是它的元件特性。而触发器也需要能够存储值，它存储的值也需要能够改变，这是怎么做到的呢？\n图 12\n电平的状态不止有低、高两种。电平从低电平跃升到高电平，这叫上升沿；反之从高电平下降到低电平，这叫下降沿。上升沿和下降沿的时机也可以被电子元件捕捉。以 D 触发器为例，依据边缘触发时机的不同，可以分为 上升沿 D 触发器 和 下降沿 D 触发器。D 触发器可以在特定时机改变它存储的值。\n计算机内的高低电平是怎么产生的？ #  是不是存在一个不停吹哨子的「人」？其实没有。计算机启动时，从指定的内存地址启动，启动以后就开始不停地执行二进制指令。系统及程序的指令，就是计算机的「心跳」，由于每台计算机执行一个基本指令所需的时间是固定的，看起来不停运行的计算机就像有节拍、有心跳一样，其实并没有。\n相关问题 #  二极管正负极如何判定？ #  人类在生产的时候做了一些规定。\n1）一般有色环的为负极，有白线的一端为负极。\n \n图 13\n2）对于发光二极管，引脚长的为正极，短的为负极。\n \n图 14\n3）发光二极管管体内部金属极较小的是正极，大的片状的是负极。\n \n图 15\n4）看图示，竖杠一端为阴极（负极），三角一端为阳极（正极）。三角是一个箭头，箭头指向的方向是电流的方向，在电的一般定义中，电流与正电荷的方向一致（虽然没有正电荷，移动的只有反方向的带负电的电子）。\n图 16\n什么是二极管思维？ #  是一个讽刺比喻。思想偏激，非黑即白，不能辩证地、客观地看待问题。看待事物的观点比较单一，自带立场，只认为与自己立场的观点是正确的，其他的都是错误的。没有独立人格和独立思维意识。\n送一张畅学卡 #  最后，说一个与二极管无关的小事。中秋节的时候，极客时间送了我一些畅学卡，相当于是一个临时会员，可以免费学习上面的付费课程。还剩几张，如果对你有用，你想体验，私信我发给你。先到先得，发完为止。\n图 17\n没有想到，到现在还没有送完。不知道是朋友们以为没有用，还是以为早已经送完了。好在截止 2023 年 9 月前有效，一时半会不会过期。\n2022 年 9 月 13 日\n参考链接\n  https://www.youtube.com/watch?v=WbcUw9kXEw0  https://www.jianshu.com/p/8d5e901271a7  https://zh.wikipedia.org/zh-sg/数字信号  https://xiaogd.net/book/spcp/multi-bit-adder/two-bit-binary-adder.html  http://www.highfel.com/jishu/396.html  "},{"id":25,"href":"/posts/2022/0910.html","title":"节日填词一首：⽔调歌头・2022中秋数字化展望","section":"Posts","content":"节日填词一首：⽔调歌头・2022中秋数字化展望 #  ⽔​调歌头・2022中秋数字化展望 #   \n时代有需要，数字必超前。未来钻石年代，何事会翻番？姣月朝朝高挂，墨客年年作雅，恒变是真言。\n命运眷过甚？参照有前篇。慕高士，追大佬，站前沿。不应陷入，娱乐知识的狂欢。人有沉浮兜转，月有阴晴寒暖，有事往前看。但行教之道，桃李满天边。\n数字化时代随想​ #  2021年，我国发布了「第14个五年计划和2035远景⽬标纲要」及「⼗四五数字经济发张规划」。\n⽂件指出，国家在未来13年内，要⼤⼒发展数字化产业，⼤⼒推进全⾏业全⽅⾯数字化深度改⾰，将数字化夯实为⼀项起跑线能⼒。其中软件和信息技术服务⾏业，从2020年到2025年，5年之间要实现产业规模翻倍增长。\n我们可以这样理解，未来科技⾏业，尤其是软件和信息技术服务⾏业，是未来13年内的黄⾦钻产业，它值得所有仁⼈志⼠为此前仆后继。\n物竞天择，适者⽣存，在快速变化的时代洪流中，有⼀些⼈注定将被时代抛弃，同时另⼀些⼈将被时代眷顾。天上明⽉⾼挂，⼏千年来，年年有⼈看到它，对着它赋诗填词。变得是⼈，不变的是⽉亮，还有亘古不变的「变化」的道理。\n谁会受到眷顾呢？回顾上⼀个世纪70、80年代，美国的盖茨、基尔代尔、乔布斯和肯·汤普森这些⼈的事迹，见上⼀篇⽂章：比尔盖茨到是一个怎么样的人？如果你是基尔代尔，面对微软的商业竞争你会怎么做？\n⽆论是做学者稿研究，还是经商在科技⼤潮中乘风破浪，他们都⾛在了时代前沿。今天如果你也想在科技浪潮中有⼀番作为，必须⾛在时代的科技前沿。\n \n怎么才能⾛在时代前沿呢？\n要关注前沿的⽜⼈他们在做什么，他们在说什么，他们在看什么。有⼀个组织，它是⼀个把各⾏各业⽜⼈聚集起来的组织，你不必到处找⽜⼈，也不必因为找到了以后⽜⼈不理你⽽苦恼，你只需要关注这个组织就可以了。\n这个组织⼀直都在聚集⽜⼈，并积极组织⽜⼈发声。再也不要沉迷于娱乐视频、情绪泛滥的⾃媒体信息、⼼灵鸡汤和娱乐知识的狂欢之中了，这样的组织才是真正值得你花时间关注的，如果你还没有退休的话。\n另外还有⼀个平台，它针对这⼀时代契机，发布了结构完备的数字⼈才粮仓模型，指出了时代的数字化需要。\n \n如果你想参与数字化时代变⾰，关注这个组织的账号，学习⽜⼈的视⾓，在这个平台上学习⽜⼈的经验，这样就可以了。\n我作为⼀名普通的程序员，很早⼀直也是这么做的，后来我成为了这个组织中的⼀员，也有幸在这个平台上发布了⾃⼰的课程。\n现在我作为⼀名计算机⽼师，已经开始为国家培养软件和信息技术服务⼈才⽽努⼒，我专注的路径是：通过BPL实战教学思想，在⼀个项⽬中传授⼀个整体的职业发展道路上所需的基本技能，快速培养数字化转型⼈才和新型⼈才。\n最后说⼀下上⾯提到的组织和平台，她们是腾讯云TVP和极客时间。\n当然国内优秀的软件和信息技术学习平台不⽌有极客时间，还有⽼牌的CSDN和发展势头猛劲的51CTO，她们也是⾮常优秀的程序员社区与平台。\n  https://csdn.net/  https://www.51cto.com/  下⾯，根据上⾯的随想，即兴填词⼀⾸，见开头。\n最后说一下封面，这是腾讯云TVP组织 寄送的中秋节\u0026amp;教师节礼物。非常漂亮，有三个色可以变换。设计也非常简洁，触摸式开关，可充电，也可离电单独使用。\n2022年9月10日\n"},{"id":26,"href":"/posts/2022/09082.html","title":"「坠落」观影有感，观众最大槽点：苹果手机能用三天？","section":"Posts","content":"「坠落」观影有感，观众最大槽点：苹果手机能用三天？ #   我的天，恐高勿看！（注意：影评都含有一定的剧透，介意请马上关上！）\n  铁塔太高了，没有信号，用鞋子搭载手机扔到塔下求救，失败了。\n  遇到烧烤露营的人，发信号弹求救，结果人家不但不救她们，还把她们的车偷走了。\n  然后就是使用无人机尝试向旅店送信，结果无人机过马路没有看红绿灯，被卡车撞碎了。\n  最后，最后，还是靠把手机扔下塔（借助闺蜜），发出求救信号得救的。\n  主角本来是在闺蜜的建议下，通过极限运动克服之前一个极限运动留下的情感阴影。现在好了，阴影更深啦。不过，失恋的阴影应该已经走出来啦。\n影片从闺蜜下塔拿包，剧情就开始高度紧张。闺蜜的死亡反转，是全局一大亮点，相信这一点会促使你倒回去再看二遍。\n从创作技法上讲，代入感很强。骨肉亲情、生死之交、侵夺背叛，容易产生代入感的三个方面都涉及到了，代入感想不强都很难。\n如果再能设计一点集体荣誉、弱势群体因素进去就更强了：\n  例如，在集体荣誉方面，可以让闺蜜参加一个极限主播大赛，主角和闺蜜为了获胜拿奖，必须参与这次挑战。\n  还有，在弱势群体方面，可以把主角和闺蜜设定为非法移民群体，甚至肤色都可以变成黑色，也可以让旅馆的人发现碎在马路上的直升机，看到了纸条，但没有人愿意选择来救她们，因为她们处在社会的最底层，命不值钱。如果这样设定，露营的人不救她们还偷车，就更容易站住脚了。还有，往宏大了讲，社会教育意义还附加上了。（该死的教育意义）\n  最后说一下，有人质疑为什么不用无人机把手机送下塔，还有两人的运动装备根本不专业，背包没有上双险，保命绳也不长，还有一个最大槽点：苹果手机能用三天？好吧，如果导演没有从水果商那里拿到一份广告费的话，确实应该换一个手机品牌。\n等等吧，确实有一些不严谨的地方，但电影或小说，主要是帮助观众释放情绪的，情绪占第一位，逻辑什么的其实不太重要。\n 最后附一个在线试看链接：https://www.olevod.com/index.php/vod/play/id/38429/sid/1/nid/1.html，请支持正版。\n 2022年9月8日\n"},{"id":27,"href":"/posts/2022/0908.html","title":"从金庸武侠小说中文字的疏密，与齐白石草虫国画中的写意与写实，看如何加快节奏？","section":"Posts","content":"从金庸武侠小说中文字的疏密，与齐白石草虫国画中的写意与写实，看如何加快节奏？ #  我很早就注意到了这种现象，今天分享出来与朋友们探讨，并且这种艺术处理技巧，不止可以应用在武侠小说的创作中，在计算机技术图书的写作中，应该也是可用的。本质上，都是用最精简的文字，表达最丰富的内涵。我们的古代文字都比较简洁，惜字如金，甚至标点都要略去，这除了节省竹简的考虑，应该还有艺术表达上的简洁需要。\n武侠小说中文字的疏与密 #  先看武侠小说中文字的疏密，以我最喜欢的金庸先生的小说《侠客行》为例，世纪新修版下册第605页有这样一段文字：\n 闵柔颤声道：“谢天谢地，终于\u0026hellip;\u0026hellip;终于打听到了这女子的下落，师哥！咱们\u0026hellip;\u0026hellip;咱们赶着便去。”石清点头道：“是。”二人当即向白自在等人作别。\n 这段话，作者写在石清、闵柔知道了梅芳姑在熊耳山枯草岭之后，前面二人的对话都是实写，最后一句，以“二人”开头的，是虚写。二人是怎么向众人作别的，没有细写。为什么没有实写？因为不需要啊。另外，这里为什么单提了一下白自在，因为下面就是白自在与他们夫妇二人的对话。\n石清、闵柔早不知道梅芳姑的下落，晚不知道，偏偏在这个时候知道，为什么？这是金大导演安排的。侠客岛归来，《侠客行》前面的剧情都写完了，就剩下熊耳山最后的一幕剧情了。石破天在海上救了师父、阿秀之后，作者特意安排的这个桥段，就是为了引出熊耳山的后续剧情。\n再看一个疏写的例子，同册第611页：\n 众人的目光一齐都向石破天射去，人人心中充满了疑窦：“梅芳姑是处子之身，自然不会是他母亲。那么他母亲是谁？父亲是谁？梅芳姑为什么要自认是他母亲？”\n 在这一段的开头，“众人”便是疏写，将众人的心思并在了一起。这在电影中是没有办法直接用镜头变现的，替代的方式只能用旁白。有时候我们说小说比电影好看，也在于此。\n「疏」写大致主要有两种情况：\n 一，将几个人的言行、心思并在一起写； 二，高度概括内容，相当于是语言的白描手法。  还有一种简写，虽然不是「疏」写，但能让文字更少。看一个同册第606页的示例：\n 他此刻的轻功何等了得，转瞬间便上了山岭，绕过一片林子，到了几间草屋之前。只听得狗吠声响，一条黄狗从屋中奔将出来，扑向他的肩头。石破天一把搂住，喜叫：“阿黄，阿黄！你回来了。我妈妈呢？”大叫：“妈妈，妈妈！”\n 这一段中，“石破天一把搂住”，搂住什么？缺少宾语。还有后面的“大叫”，谁大叫？缺少主语。从语法上似乎有点毛病，但语句极其简洁，文学表达效果也更好了。奇怪不？少了文字，语法不全，效果还更好了。这是精简语句，让文字更为简洁高效的方法。\n下面看「密」写的例子。这样的例子书中有许多，仅举一例：\n 丁不四见对方人多，突然灵机一动，道：“好，一言为定，咱们大家都不出手。你们这边是石庄主夫妇，他们这边是母子二人。双方各是一男一女，大家见个胜败便是。”他和石破天动过几次手，知道这少年武功远在石清夫妇之上，有他相助，梅芳姑诀计不会落败。\n 这里写了丁不四的言语和心思，已经属于详写了。\n武侠小说中的详写与略写，必须间隔起来，这样读起来才不容易觉得疲倦。人们常说读金庸小说不觉得累，如果没有生理限制，可以一直读下去。写作常言技巧“文似看山不喜平”，便可以从文字的疏与密上理解。\n国画中的写意与写实 #  下面看国画中的写意。什么是写意？说白了就是「疏」，就是「略」，就是抽象。这是一张齐白石的草虫国画：\n \n这里萝卜画得简略，虫子画得精细。是齐白石大师画不精细吗？显然不是，齐白石年少学做木匠，中年又学刻印，手上功夫是很有准头的。这不是工笔画，不用写实，这是写意画。但即使在写意画当中，齐白石对画中事物也分了疏密，倘若萝卜和虫子一昧画得工笔细致，或一昧画得粗糙简略，便失去国画的意味了。你可以网上随意找一下，齐白石的画，画的风格总是疏密有致的，没有一边倒的情况。\n所以，现在我讲明白了吗？小说文字的疏与密，国画中的写意与写实，它们是一回事，源自同一种中国文化，往更高的层次说是同样的一种艺术处理技巧。\n小结 #  最后总结一下我的感受。武侠小说中，无论是将多人言行、心思并作一类抽象的人「疏」写，还是将要写的内容作抽象概括，像故事大纲一样一笔带过，以及用简短有力的句子，将一句话中的主语或谓语省略掉，这一切都是为（小说要讲的）故事服务的。\n为了讲好故事，有些话可以略写，甚至不写。这种错落有致的写法，才让读者觉得小说的「节奏」快。其实「节奏」只是一个读者主观的阅读体验罢了，加快叙事进度，不说多余的话，快点把故事讲完，在读者这边的感受结果就是三个字——节奏快。\n反过来，如何小说通篇内容都是情节大纲式的略写，抑或是事无巨细式的详写，读者的阅读感受要么是索然无味，要么是审美疲劳，读个几章内容就读下去了，这种情况在网文小说中很常见。有人说现在网文节奏变快了，金庸小说过时了。其实不是的，很多网文作者都没有什么写作经验，靠在小说中塞几个黄段子飞起，仅是金庸武侠小说中疏与密这一个技巧，就值得他们好好学习。\n2022年9月8日于北京\n"},{"id":28,"href":"/posts/2022/0906.html","title":"Github Gist是什么？","section":"Posts","content":"Github Gist是什么？ #  Gist（https://gist.github.com/），中文要点，/dʒɪst/，是Github提供的一个子服务，可以在线分享比较小的代码片段，同样的代码如果用传统创建仓库的方式分享可能就显得笨重了。Gist就是一个精简版的Repository。下面是我用《微信小游戏开发》3.2.2示例代码做的实验，及实验感受。\n它分享的范围有哪些？ #  创建时有两个选项：\n第一个选项“Create secret gist”，虽然有 secret，但也不是私密的，看到分享链接的人都可以访问。第二个选项，是一个完全公开的、搜索引擎可以抓取的链接。\n基本公司团队内分享，使用第一个选项合适；撰写一个小教程，就像我这篇文章一样，适合使用第二个选项。这个选项或许还可以让我们的文章有更多的曝光量，当然这仅限于你在代码中可以留下了文章链接。\n它有什么用法？ #  在线创建后便可以分享了。\n在页面中内嵌代码 #  直接在 md 或 HTML 页面中，用 script 标签嵌入一个 js 地址：\n1\u0026lt;script src=\u0026#34;https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 下面 Gist 嵌入开始：\n 嵌入结束，效果如上所示。\n它是怎么工作的？这个很容易猜出。\njs 文件链接本身即包含了足够的信息，它会先动态加载基本的类库，然后再把要加载的对象信息传递给类库，对象（我们分享的代码）加载完成之后，最后统一在页面上创建 HTML 元素并把代码渲染出来。\n如果查看上述 8829.js 文件的代码，它的内容类似是这样的：\n1document.write(\u0026#39;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://github.githubassets.com/assets/gist-embed-19d8e57711b3.css\u0026#34;\u0026gt;\u0026#39;) 2document.write(\u0026#39;\u0026lt;div id=\\\u0026#34;gist118190366\\\u0026#34; class=\\\u0026#34;gist\\\u0026#34;\u0026gt;\\n \u0026lt;div class=\\\u0026#34;gist-file\\\u0026#34; translate=\\\u0026#34;no\\\u0026#34;\u0026gt;\\n...\u0026#39;) 第一行是 Github 基本的CSS样式类库，第二行是与我们每一个分享的代码有关的信息。\n分享链接 #   https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829\n注意，这个地址很奇妙啊，这不就是上面那个js文件的地址吗？只是少了一个js后缀。在Github的服务器端，加上后缀是被引入的js文件，不加是Gist代码的主页地址，这样的API设计不可谓不算简约。\n提供一个 zip 下载链接 #   https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829/archive/9b29a41650efa5bd9884d27ba9cb617e0291f8e1.zip\n对于自己已经创建的历史 Gist，Github 都有记录，这个地址就是 Gist 地址加上自己的 Github ID，例如我的 Gists 地址是：\n https://gist.github.com/rixingyike\nGist 不能在线直接运行吗？ #  目前不能。\nGist 允许同时分享多个文件，我在使用时看到这个功能还很高兴，因为可以保持文件的名称和相对位置，对于前端小示例，便意味着可以在线运行。\n事实上不可以。\n事实上 HTML/CSS/JS 组成的静态示例，是可以实现在线运行的。\n对于看到分享链接的读者来说，不仅能看到代码，还能看到运行效果。甚至其他语言，例如 Python、Go 等，借助 WebAssembly 技术，也可以实现在线查看源码与运行效果。\n虽然 Gist 官方不能，但有人开发了第三方应用，可以动态加载 Gist 并呈现动态效果，例如：\n https://bl.ocks.org/\n使用方法也很简单，直接将上面自己的分享链接中的 gist.github.com，替换为 bl.ocks.org 即可。例如我的这个小示例微信小游戏开发 3.2.2，在线查看地址为：\n https://bl.ocks.org/rixingyike/3e64127a5ebb66ee381093bfeeed8829\n运行效果为：\n \n它已然是一个「活」的 HTML 页面了。但它在这里只是一张图片，那么这个示例效果页也可以嵌入吗？\n的md文件内应该是可以的，因为md支持HTML代码嘛。嵌入效果如下：\n 嵌入结束。\n没有效果！没有办法，资源是bl.ocks.org的，人家拒绝我们跨域嵌入，我们便无法通过iframe引入了。\n其他问题 #  gist.github.com 被墙无法访问的解决办法 #  可以用梯子，或者修改 hosts 文件，直接将 gist.github.com 指向它的 IP 地址（例如 192.30.253.118），这一招破解的是 DNS 污染。\n具体指向哪里，不一定，可以在本地用 ping 指令查看一下。希望你的 ping 结果不是这样的：\n0 received, 100% packet loss\n有人把 Gist 当作一个写作平台 #  这件事是结合http://roughdraft.io来做的，但其实没有必要啊。Github仓库+hugo+Github Actions 就可以构建一个完美的静态博客，没有必要用结构松散的 Gist。\n如何看待 Github Gist 这个服务，怎样更好地利用？ #  就是一个阉割版的 Repository，便于在线分享内容，不局限于分享代码。正常使用就可以了，过度使用就没有必要了。\nHow to create a GitHub Gist with API? #  先创建 Github Token，然后在下面这个网址：\n https://docs.github.com/cn/rest/gists/gists\n找到需要的 REST API，进行 Gist 的 CURD 操作就可以了。\n小结 #  当然了，Gist 本质上最大的功能，还是内嵌代码，且天然支持高亮，效果如下所示。\n \n身为程序员，没有用过 Gist 或不能用 Gist，感觉像吃手把肉没有韭菜花一样，多少有点不完美。 "},{"id":29,"href":"/guestbook.html","title":"Guestbook","section":"Hi","content":"Guestbook #  在下方评论区留言。\n"},{"id":30,"href":"/about.html","title":"关于作者","section":"Hi","content":"关于作者 #  数字化教育讲师/作者， 腾讯云最具价值专家（TVP），微信学堂 《小程序性能优化实践》讲师，极客时间 《微信小程序全栈开发实战》讲师，一汽大众等企业内训讲师，《小程序从0到1》《微信小游戏开发》等图书作者。微信视频号/公共号「艺述论」作者。\n我在寻找数字化职业教育讲师的工作机会，全职/兼职均可，地点北京，欢迎朋友们介绍。\n联系方式 #   QQ：9830131 Weixin：同上 Email：9830131#qq.com  添加微信时，请注明来意。\n支付宝 微信 PayPal PayPal.Me/coderliyi --"},{"id":31,"href":"/categories.html","title":"Categories","section":"Hi","content":"Categories #  "},{"id":32,"href":"/tags.html","title":"Tags","section":"Hi","content":"Tags #  "}]