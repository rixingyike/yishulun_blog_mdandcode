<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hi on 艺述论 - YiShuLun</title>
    <link>https://www.yishulun.com/</link>
    <description>Recent content in Hi on 艺述论 - YiShuLun</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 09 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.yishulun.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>比尔盖茨到是一个怎么样的人？如果你是基尔代尔，面对微软的商业竞争你会怎么做？</title>
      <link>https://www.yishulun.com/posts/2022/0909.html</link>
      <pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yishulun.com/posts/2022/0909.html</guid>
      <description>比尔盖茨到是一个怎么样的人？如果你是基尔代尔，面对微软的商业竞争你会怎么做？ #  这个问题应该没有什么标椎答案。我阅读了一些相关资料，有人说基尔代尔博士是一位计算机发展史上完全被低估贡献的极客，还有人说钱是万能的，历史的小姑娘被人打扮了，比尔·盖茨在他的著作《未来之路》中刻意将卖给他QDOS（一个DR-DOS的变种）的蒂姆·帕特森捧了出来，淡化了基尔代尔在DOS系统发展史上的贡献。甚至称通过抄袭赚了7.5万美元的蒂姆·帕特森为「DOS之父」，天哪，哈哈，如果蒂姆·帕特森是DOS之父，那么基尔代尔博士在历史上又做了什么？
对此我有不同的看法。历史是一个小姑娘，谁都可以打扮，既可以往左打扮，也可以往右打扮；比尔·盖茨的书不可以全信，但借此批评比尔·盖茨的文章也未必值得全信。基尔代尔博士在DOS发展史上的贡献毋庸置疑，盖茨在《未来之路》中的叙述确实也有失大方，但我想说的是，这里面已经发生的事，有各自的缘由，这些对我们都不重要，重要的是我们从这段历史中能得到什么启示？
三点启示 #  读史使人明智，基尔代尔博士为什么没能创建一个微软？微软的商业模式在当时为什么可以如此成功？这里面至少有3点启示：
 一，一定要开放，Unix于1969年就被开发出来了，但它却没有比7年后，1976年诞生的MS-DOS的前身——CP/M获得更多的用户市场； 二，一定要重视生态，IBM的OS/2 Wrap系统不比微软的MS-DOS系统做的好吗？当然不是，只因为微软先发制人，占领了市场先机，致使后来者即使再优秀也不能取而代之； 三，一定要有一个好的商业模式。在微软还没有起飞之前，基尔代尔博士的DR（Digital Research，数字研究所）公司在微机市场占有最大的市场份额，这种情况下为什么微软还可以发展起来？微软的商业模式既保持了生态上的开放性，在开放的同时又最大化保护了自己的利益。微软的操作系统是与硬件绑定的，厂家每卖出一个电脑，微软就会自动卖出一个系统。  计算机系统的进化史 #  为了了解微软为什么可以崛起，我们有必要先梳理一下计算机系统的发展史。
开关编程 #   
1946年，为给美国陆军的弹道研究实验室（BRL）计算火炮火力表，世界上第一台图灵完备的电子通用计算机ENIAC诞生了，开始它还没有操作系统。那个时候它就是一台北京三室一厅那么大的电子计算器，计算机小姐（Computer Lady，是真正的小姐，有知识有文化）需要在ENIAC上手动拨动开关，以进行编程，就像在计算器上按键一样。
 
靠手动拨动开关进行编程的效率肯定低了，也容易出错。
第一台家用计算机阿塔尔8800 #  1974年面世的阿塔尔（Altair）8800，如下所示，它由美国微型仪器和遥测系统（MITS，Micro Instrumentation and Telemetry Systems）公司，基于Intel 8080微处理器实现，它是第一款取得商业成功的家用计算机。当时还在哈佛读书的比尔·盖茨与其小伙伴保罗·艾伦一起为Altair 8800设计了Altair BASIC编辑器，这款编译器后来变成了Microsoft BASIC，成为了MS-DOS系统的基础，后来又变成了Microsoft QuickBASIC，最后成为了今天依然流行的Visual Basic。Microsoft在命名上也以Micro开头，可能收了MITS的影响。包括比尔·盖茨退学创建微软，也可能与这次成功的外包经历有关。注意这个时间，1974年，比基尔代尔博士发布CP/M，还有二年时间。
 注意：BASIC并不是比尔·盖茨设计的，最原始的BASIC语言是在1964年由约翰·克米尼和Thomas E. Kurtz设计的。
  
阿塔尔8800虽然是一课家用计算机，但要给他编程并不容易，要拨动面板上的开关，靠输入二进制操作码输入数据（一堆0和1），然后按「存储键」把临时值写入内存。注意，这时候计算机已经有了内存了。
待到把整个程序都写入内存后，推动开关，内存地址重设为0，按「运行」按钮，灯闪烁起来，阿塔尔就开始运行了。下一次如果要计算别的什么，重新再来一遍开关编程，阿塔尔与其说是一个电脑，不如说是一个大玩具。
打孔机编程 #  人们或许从早期可编程纺织机上获得了灵感，发明了打孔机，专门给纸卡打孔。开关只有两个状态，不是0就是1，上机前先在纸带上把要输入的0、1数据准备好，等计算机空闲了，拿纸卡往读卡器一插就可以了。用打孔机编程，不仅提高了计算机的利用效率，还减少了出错率。
IBM在1964年推出的IBM 029打孔机是当时打孔机的代表，如下所示：
 
IBM 029是作为IBM System/360 大型电脑的配件而发售的，用IBM 029打出一种一种打孔卡，如下所示：
 
将这种打孔卡插入IBM System/360，计算机就可以自动输入数据，已经不再需要波动开关了，计算机小姐们觉得太幸福了，此时离1946年ENIAC诞生已经过去了18年。</description>
    </item>
    
    <item>
      <title>「坠落」观影有感，观众最大槽点：苹果手机能用三天？</title>
      <link>https://www.yishulun.com/posts/2022/09082.html</link>
      <pubDate>Thu, 08 Sep 2022 17:23:49 +0800</pubDate>
      
      <guid>https://www.yishulun.com/posts/2022/09082.html</guid>
      <description>「坠落」观影有感，观众最大槽点：苹果手机能用三天？ #   我的天，恐高勿看！（注意：影评都含有一定的剧透，介意请马上关上！）
  铁塔太高了，没有信号，用鞋子搭载手机扔到塔下求救，失败了。
  遇到烧烤露营的人，发信号弹求救，结果人家不但不救她们，还把她们的车偷走了。
  然后就是使用无人机尝试向旅店送信，结果无人机过马路没有看红绿灯，被卡车撞碎了。
  最后，最后，还是靠把手机扔下塔（借助闺蜜），发出求救信号得救的。
  主角本来是在闺蜜的建议下，通过极限运动克服之前一个极限运动留下的情感阴影。现在好了，阴影更深啦。不过，失恋的阴影应该已经走出来啦。
影片从闺蜜下塔拿包，剧情就开始高度紧张。闺蜜的死亡反转，是全局一大亮点，相信这一点会促使你倒回去再看二遍。
从创作技法上讲，代入感很强。骨肉亲情、生死之交、侵夺背叛，容易产生代入感的三个方面都涉及到了，代入感想不强都很难。
如果再能设计一点集体荣誉、弱势群体因素进去就更强了：
  例如，在集体荣誉方面，可以让闺蜜参加一个极限主播大赛，主角和闺蜜为了获胜拿奖，必须参与这次挑战。
  还有，在弱势群体方面，可以把主角和闺蜜设定为非法移民群体，甚至肤色都可以变成黑色，也可以让旅馆的人发现碎在马路上的直升机，看到了纸条，但没有人愿意选择来救她们，因为她们处在社会的最底层，命不值钱。如果这样设定，露营的人不救她们还偷车，就更容易站住脚了。还有，往宏大了讲，社会教育意义还附加上了。（该死的教育意义）
  最后说一下，有人质疑为什么不用无人机把手机送下塔，还有两人的运动装备根本不专业，背包没有上双险，保命绳也不长，还有一个最大槽点：苹果手机能用三天？好吧，如果导演没有从水果商那里拿到一份广告费的话，确实应该换一个手机品牌。
等等吧，确实有一些不严谨的地方，但电影或小说，主要是帮助观众释放情绪的，情绪占第一位，逻辑什么的其实不太重要。
 最后附一个在线试看链接：https://www.olevod.com/index.php/vod/play/id/38429/sid/1/nid/1.html，请支持正版。
 2022年9月8日</description>
    </item>
    
    <item>
      <title>从金庸武侠小说中文字的疏密，与齐白石草虫国画中的写意与写实，看如何加快节奏？</title>
      <link>https://www.yishulun.com/posts/2022/0908.html</link>
      <pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yishulun.com/posts/2022/0908.html</guid>
      <description>&lt;h1 id=&#34;从金庸武侠小说中文字的疏密与齐白石草虫国画中的写意与写实看如何加快节奏&#34;&gt;
  从金庸武侠小说中文字的疏密，与齐白石草虫国画中的写意与写实，看如何加快节奏？
  &lt;a class=&#34;anchor&#34; href=&#34;#%e4%bb%8e%e9%87%91%e5%ba%b8%e6%ad%a6%e4%be%a0%e5%b0%8f%e8%af%b4%e4%b8%ad%e6%96%87%e5%ad%97%e7%9a%84%e7%96%8f%e5%af%86%e4%b8%8e%e9%bd%90%e7%99%bd%e7%9f%b3%e8%8d%89%e8%99%ab%e5%9b%bd%e7%94%bb%e4%b8%ad%e7%9a%84%e5%86%99%e6%84%8f%e4%b8%8e%e5%86%99%e5%ae%9e%e7%9c%8b%e5%a6%82%e4%bd%95%e5%8a%a0%e5%bf%ab%e8%8a%82%e5%a5%8f&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;我很早就注意到了这种现象，今天分享出来与朋友们探讨，并且这种艺术处理技巧，不止可以应用在武侠小说的创作中，在计算机技术图书的写作中，应该也是可用的。本质上，都是用最精简的文字，表达最丰富的内涵。我们的古代文字都比较简洁，惜字如金，甚至标点都要略去，这除了节省竹简的考虑，应该还有艺术表达上的简洁需要。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Github Gist是什么？</title>
      <link>https://www.yishulun.com/posts/2022/0906.html</link>
      <pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://www.yishulun.com/posts/2022/0906.html</guid>
      <description>&lt;h1 id=&#34;github-gist是什么&#34;&gt;
  Github Gist是什么？
  &lt;a class=&#34;anchor&#34; href=&#34;#github-gist%e6%98%af%e4%bb%80%e4%b9%88&#34;&gt;#&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Gist（https://gist.github.com/），中文要点，/dʒɪst/，是Github提供的一个子服务，可以在线分享比较小的代码片段，同样的代码如果用传统创建仓库的方式分享可能就显得笨重了。Gist就是一个精简版的Repository。下面是我用《微信小游戏开发》3.2.2示例代码做的实验，及实验感受。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Guestbook</title>
      <link>https://www.yishulun.com/guestbook.html</link>
      <pubDate>Thu, 01 Sep 2022 20:48:35 +0800</pubDate>
      
      <guid>https://www.yishulun.com/guestbook.html</guid>
      <description>Guestbook #  在下方评论区留言。</description>
    </item>
    
    <item>
      <title>关于作者</title>
      <link>https://www.yishulun.com/about.html</link>
      <pubDate>Thu, 01 Sep 2022 20:48:35 +0800</pubDate>
      
      <guid>https://www.yishulun.com/about.html</guid>
      <description>关于作者 #  李艺， 腾讯云最具价值专家（TVP），微信学堂 《小程序性能优化实践》讲师，极客时间 《微信小程序全栈开发实战》讲师，一汽大众等企业内训讲师，《小程序从0到1》《微信小游戏开发》等图书作者。视频号/公共号「艺述论」作者。
学编程就像登山，一步一个台阶，没有人学不会。
联系方式 #   QQ：9830131 Weixin：同上 Email：9830131#qq.com  当您添加别人的微信时，如果您没有写明备注，我想您也不会介意对方拒绝。
赞赏 #  如果觉得这个博客对你有帮助，欢迎扫码打赏博主。
支付宝 微信 PayPal PayPal.Me/coderliyi </description>
    </item>
    
    <item>
      <title>Archives</title>
      <link>https://www.yishulun.com/archives.html</link>
      <pubDate>Thu, 01 Sep 2022 19:21:55 +0800</pubDate>
      
      <guid>https://www.yishulun.com/archives.html</guid>
      <description></description>
    </item>
    
    <item>
      <title>Categories</title>
      <link>https://www.yishulun.com/categories.html</link>
      <pubDate>Fri, 01 Nov 2019 16:10:12 +0800</pubDate>
      
      <guid>https://www.yishulun.com/categories.html</guid>
      <description>Categories #  </description>
    </item>
    
    <item>
      <title>Tags</title>
      <link>https://www.yishulun.com/tags.html</link>
      <pubDate>Fri, 01 Nov 2019 16:10:12 +0800</pubDate>
      
      <guid>https://www.yishulun.com/tags.html</guid>
      <description>Tags #  </description>
    </item>
    
  </channel>
</rss>