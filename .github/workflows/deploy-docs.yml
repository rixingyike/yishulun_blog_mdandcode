name: Deploy(ÈÉ®ÁΩ≤ÊñáÊ°£)
on:
  workflow_dispatch: {}
  push:
    branches:
      - main
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # - run: yarn install --frozen-lockfile

      - name: ÂÆâË£Ö pnpm
        uses: pnpm/action-setup@v2
        with:
          run_install: true
          version: 8

      - name: ËÆæÁΩÆ Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm
      
      - name: Build(ÊûÑÂª∫ÊñáÊ°£)
        env:
          NODE_OPTIONS: --max_old_space_size=8192
        run: |-
          pnpm run docs:build
          > src/.vuepress/dist/.nojekyll
          
      - uses: actions/configure-pages@v2
      - uses: actions/upload-pages-artifact@v1
        with:
          path: src/.vuepress/dist

      - name: Deploy to external repository
        uses: cpina/github-action-push-to-another-repository@v1.7.2
        env:
          # üèóÔ∏è <internal repository>, run GitHub Action.
          # üéÅ <external repository>, receiving Artifacts.
          #
          # Way 1: using Personal Access Token
          # @see https://cpina.github.io/push-to-another-repository-docs/setup-using-personal-access-token.html#setup-personal-access-token
          # 1.1 Generate Personal Access Token: <external repository>/<Avatar>/Settings/Developer settings/Personal access tokens/Generate new token
          #     Select `No expiration` and Check `‚úÖÔ∏è repo    Full control of private repositories`, Generate and then Copy the Token
          # 1.2 Then make the token available to the GitHub Action: <internal repository>/Settings/Secrets/Actions/New repository secret
          #     Name: EXTERNAL_REPOSITORY_PERSONAL_ACCESS_TOKEN, Value Paste the Token
          API_TOKEN_GITHUB: ${{ secrets.EXTERNAL_REPOSITORY_PERSONAL_ACCESS_TOKEN }}
          # Way 2: using SSH deploy keys
          # @see https://cpina.github.io/push-to-another-repository-docs/setup-using-ssh-deploy-keys.html#setup-ssh-deploy-keys
          # 2.1 Generate an SSH key in terminal (Leave the passphrase empty)
          # 2.2 Add public key in the external repository: <external repository>/Settings/Deploy keys/Add deploy key
          #     Name: DEPLOY_PUBLIC_KEY, Value Paste the public key. Enable "‚úÖÔ∏è Allow write access"
          # 2.3 Add private key in the source repository: <external repository>/Settings/Secrets/Actions/New repository secret
          #     Name: DEPLOY_PRIVATE_KEY, Value Paste the private key.
          # SSH_DEPLOY_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}

        with:
          # GitHub Action output files
          source-directory: src/.vuepress/dist/
          destination-github-username: rixingyike
          destination-repository-name: yishulun.com
          user-email: 9830131@qq.com
          # It defaults to `main`
          target-branch: "main"

      - name: Test get variable exported by push-to-another-repository
        run: echo $DESTINATION_CLONED_DIRECTORY