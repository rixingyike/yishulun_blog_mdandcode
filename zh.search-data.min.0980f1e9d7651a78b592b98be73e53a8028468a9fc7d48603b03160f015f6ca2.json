[{"id":0,"href":"/posts/2022/0908.html","title":"从金庸武侠小说中文字的疏密，与齐白石草虫国画中的写意与写实，看如何加快节奏？","section":"Posts","content":"从金庸武侠小说中文字的疏密，与齐白石草虫国画中的写意与写实，看如何加快节奏？ #  我很早就注意到了这种现象，今天分享出来与朋友们探讨，并且这种艺术处理技巧，不止可以应用在武侠小说的创作中，在计算机技术图书的写作中，应该也是可用的。本质上，都是用最精简的文字，表达最丰富的内涵。我们的古代文字都比较简洁，惜字如金，甚至标点都要略去，这除了节省竹简的考虑，应该还有艺术表达上的简洁需要。\n武侠小说中文字的疏与密 #  先看武侠小说中文字的疏密，以我最喜欢的金庸先生的小说《侠客行》为例，世纪新修版下册第605页有这样一段文字：\n 闵柔颤声道：“谢天谢地，终于\u0026hellip;\u0026hellip;终于打听到了这女子的下落，师哥！咱们\u0026hellip;\u0026hellip;咱们赶着便去。”石清点头道：“是。”二人当即向白自在等人作别。\n 这段话，作者写在石清、闵柔知道了梅芳姑在熊耳山枯草岭之后，前面二人的对话都是实写，最后一句，以“二人”开头的，是虚写。二人是怎么向众人作别的，没有戏写。为什么没有实写？因为不需要啊。另外，这里为什么单提了一下白自在，因为下面就是白自在与他们夫妇二人的对话。\n石清、闵柔早不知道梅芳姑的下落，晚不知道，偏偏在这个时候知道，为什么？这是金大导演安排的。侠客岛归来，《侠客行》前面的剧情都写完了，就剩下熊耳山最后的一幕剧情了。石破天在海上救了师父、阿秀之后，作者特意安排的这个桥段，就是为了引出熊耳山的后续剧情。\n再看一个疏写的例子，同册第611页：\n 众人的目光一齐都向石破天射去，人人心中充满了疑窦：“梅芳姑是处子之身，自然不会是他母亲。那么他母亲是谁？父亲是谁？梅芳姑为什么要自认是他母亲？”\n 在这一段的开头，“众人”便是疏写，将众人的心思并在了一起。这在电影中是没有办法直接用镜头变现的，替代的方式只能用旁白。有时候我们说小说比电影好看，也在于此。\n「疏」写大致主要有两种情况：\n 一，将几个人的言行、心思并在一起写； 二，高度概括内容，相当于是语言的白描手法。  还有一种简写，虽然不是「疏」写，但能让文字更少。看一个同册第606页的示例：\n 他此刻的轻功何等了得，转瞬间便上了山岭，绕过一片林子，到了几间草屋之前。只听得狗吠声响，一条黄狗从屋中奔将出来，扑向他的肩头。石破天一把搂住，喜叫：“阿黄，阿黄！你回来了。我妈妈呢？”大叫：“妈妈，妈妈！”\n 这一段中，“石破天一把搂住”，搂住什么？缺少宾语。还有后面的“大叫”，谁大叫？缺少主语。从语法上似乎有点毛病，但语句极其简洁，文学表达效果也更好了。奇怪不？少了文字，语法不全，效果还更好了。这是精简语句，让文字更为简洁高效的方法。\n下面看「密」写的例子。这样的例子书中有许多，仅举一例：\n 丁不四见对方人多，突然灵机一动，道：“好，一言为定，咱们大家都不出手。你们这边是石庄主夫妇，他们这边是母子二人。双方各是一男一女，大家见个胜败便是。”他和石破天动过几次手，知道这少年武功远在石清夫妇之上，有他相助，梅芳姑诀计不会落败。\n 这里写了丁不四的言语和心思，已经属于详写了。\n武侠小说中的详写与略写，必须间隔起来，这样读起来才不容易觉得疲倦。人们常说读金庸小说不觉得累，如果没有生理限制，可以一直读下去。写作常言技巧“文似看山不喜平”，便可以从文字的疏与密上理解。\n国画中的写意与写实 #  下面看国画中的写意。什么是写意？说白了就是「疏」，就是「略」，就是抽象。这是一张齐白石的草虫国画：\n 这里萝卜画得简略，虫子画得精细。是齐白石大师画不精细吗？显然不是，齐白石年少学做木匠，中年又学刻印，手上功夫是很有准头的。这不是工笔画，不用写实，这是写意画。但即使在写意画当中，齐白石对画中事物也分了疏密，倘若萝卜和虫子一昧画得工笔细致，或一昧画得粗糙简略，便失去国画的意味了。你可以网上随意找一下，齐白石的画，画的风格总是疏密有致的，没有一边倒的情况。\n所以，现在我讲明白了吗？小说文字的疏与密，国画中的写意与写实，它们是一回事，源自同一种中国文化，往更高的层次说是同样的一种艺术处理技巧。\n小结 #  最后总结一下我的感受。武侠小说中，无论是将多人言行、心思并作一类抽象的人「疏」写，还是将要写的内容作抽象概括，像故事大纲一样一笔带过，以及用简短有力的句子，将一句话中的主语或谓语省略掉，这一切都是为（小说要讲的）故事服务的。\n为了讲好故事，有些话可以略写，甚至不写。这种错落有致的写法，才让读者觉得小说的「节奏」快。其实「节奏」只是一个读者主观的阅读体验罢了，加快叙事进度，不说多余的话，快点把故事讲完，在读者这边的感受结果就是三个字——节奏快。\n反过来，如何小说通篇内容都是情节大纲式的略写，抑或是事无巨细式的详写，读者的阅读感受要么是索然无味，要么是审美疲劳，读个几章内容就读下去了，这种情况在网文小说中很常见。有人说现在网文节奏变快了，金庸小说过时了。其实不是的，很多网文作者都没有什么写作经验，靠在小说中塞几个黄段子飞起，仅是金庸武侠小说中疏与密这一个技巧，就值得他们好好学习。\n2022年9月8日于北京\n"},{"id":1,"href":"/posts/2022/0906.html","title":"Github Gist是什么？","section":"Posts","content":"Github Gist是什么？ #  Gist（https://gist.github.com/），中文要点，/dʒɪst/，是Github提供的一个子服务，可以在线分享比较小的代码片段，同样的代码如果用传统创建仓库的方式分享可能就显得笨重了。Gist就是一个精简版的Repository。下面是我用《微信小游戏开发》3.2.2示例代码做的实验，及实验感受。\n它分享的范围有哪些？ #  创建时有两个选项：\n第一个选项“Create secret gist”，虽然有 secret，但也不是私密的，看到分享链接的人都可以访问。第二个选项，是一个完全公开的、搜索引擎可以抓取的链接。\n基本公司团队内分享，使用第一个选项合适；撰写一个小教程，就像我这篇文章一样，适合使用第二个选项。这个选项或许还可以让我们的文章有更多的曝光量，当然这仅限于你在代码中可以留下了文章链接。\n它有什么用法？ #  在线创建后便可以分享了。\n在页面中内嵌代码 #  直接在 md 或 HTML 页面中，用 script 标签嵌入一个 js 地址：\n1\u0026lt;script src=\u0026#34;https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 下面 Gist 嵌入开始：\n 嵌入结束，效果如上所示。\n它是怎么工作的？这个很容易猜出。\njs 文件链接本身即包含了足够的信息，它会先动态加载基本的类库，然后再把要加载的对象信息传递给类库，对象（我们分享的代码）加载完成之后，最后统一在页面上创建 HTML 元素并把代码渲染出来。\n如果查看上述 8829.js 文件的代码，它的内容类似是这样的：\n1document.write(\u0026#39;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://github.githubassets.com/assets/gist-embed-19d8e57711b3.css\u0026#34;\u0026gt;\u0026#39;) 2document.write(\u0026#39;\u0026lt;div id=\\\u0026#34;gist118190366\\\u0026#34; class=\\\u0026#34;gist\\\u0026#34;\u0026gt;\\n \u0026lt;div class=\\\u0026#34;gist-file\\\u0026#34; translate=\\\u0026#34;no\\\u0026#34;\u0026gt;\\n...\u0026#39;) 第一行是 Github 基本的CSS样式类库，第二行是与我们每一个分享的代码有关的信息。\n分享链接 #   https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829\n注意，这个地址很奇妙啊，这不就是上面那个js文件的地址吗？只是少了一个js后缀。在Github的服务器端，加上后缀是被引入的js文件，不加是Gist代码的主页地址，这样的API设计不可谓不算简约。\n提供一个 zip 下载链接 #   https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829/archive/9b29a41650efa5bd9884d27ba9cb617e0291f8e1.zip\n对于自己已经创建的历史 Gist，Github 都有记录，这个地址就是 Gist 地址加上自己的 Github ID，例如我的 Gists 地址是：\n https://gist.github.com/rixingyike\nGist 不能在线直接运行吗？ #  目前不能。\nGist 允许同时分享多个文件，我在使用时看到这个功能还很高兴，因为可以保持文件的名称和相对位置，对于前端小示例，便意味着可以在线运行。\n事实上不可以。\n事实上 HTML/CSS/JS 组成的静态示例，是可以实现在线运行的。\n对于看到分享链接的读者来说，不仅能看到代码，还能看到运行效果。甚至其他语言，例如 Python、Go 等，借助 WebAssembly 技术，也可以实现在线查看源码与运行效果。\n虽然 Gist 官方不能，但有人开发了第三方应用，可以动态加载 Gist 并呈现动态效果，例如：\n https://bl.ocks.org/\n使用方法也很简单，直接将上面自己的分享链接中的 gist.github.com，替换为 bl.ocks.org 即可。例如我的这个小示例微信小游戏开发 3.2.2，在线查看地址为：\n https://bl.ocks.org/rixingyike/3e64127a5ebb66ee381093bfeeed8829\n运行效果为：\n 它已然是一个「活」的 HTML 页面了。但它在这里只是一张图片，那么这个示例效果页也可以嵌入吗？\n的md文件内应该是可以的，因为md支持HTML代码嘛。嵌入效果如下：\n 嵌入结束。\n没有效果！没有办法，资源是bl.ocks.org的，人家拒绝我们跨域嵌入，我们便无法通过iframe引入了。\n其他问题 #  gist.github.com 被墙无法访问的解决办法 #  可以用梯子，或者修改 hosts 文件，直接将 gist.github.com 指向它的 IP 地址（例如 192.30.253.118），这一招破解的是 DNS 污染。\n具体指向哪里，不一定，可以在本地用 ping 指令查看一下。希望你的 ping 结果不是这样的：\n0 received, 100% packet loss\n有人把 Gist 当作一个写作平台 #  这件事是结合http://roughdraft.io来做的，但其实没有必要啊。Github仓库+hugo+Github Actions 就可以构建一个完美的静态博客，没有必要用结构松散的 Gist。\n如何看待 Github Gist 这个服务，怎样更好地利用？ #  就是一个阉割版的 Repository，便于在线分享内容，不局限于分享代码。正常使用就可以了，过度使用就没有必要了。\nHow to create a GitHub Gist with API? #  先创建 Github Token，然后在下面这个网址：\n https://docs.github.com/cn/rest/gists/gists\n找到需要的 REST API，进行 Gist 的 CURD 操作就可以了。\n小结 #  当然了，Gist 本质上最大的功能，还是内嵌代码，且天然支持高亮，效果如下所示。\n 身为程序员，没有用过 Gist 或不能用 Gist，感觉像吃手把肉没有韭菜花一样，多少有点不完美。 "},{"id":2,"href":"/posts/2022/0907.html","title":"如果你是加里·基尔代尔博士，当时面对微软的竞争你会怎么做？","section":"Posts","content":"如果你是加里·基尔代尔博士，当时面对微软的竞争你会怎么做？ #   这个问题应该没有什么标椎答案。我阅读相关资料，有人说基尔代尔博士是一位计算机发展史上完全被低估贡献的极客，还有人说钱是万能的，历史的小姑娘被人打扮了，比尔·盖茨在他的著作《未来之路》中刻意将卖给他QDOS（一个DR-DOS的变种）的蒂姆·帕特森捧了出来，淡化了基尔代尔在DOS系统发展史上的贡献。甚至称通过抄袭赚了7.5万美元的蒂姆·帕特森为「DOS之父」，天哪，哈哈，如果蒂姆·帕特森是DOS之父，那么基尔代尔博士在历史上又做了什么？\n对此我有不同的看法。历史是一个小姑娘，谁都可以打扮，既可以往左打扮，也可以往右打扮；比尔·盖茨的书不可以全信，但借此批评比尔·盖茨的文章也未必值得全信。基尔代尔博士在DOS发展史上的贡献毋庸置疑，盖茨在《未来之路》中的叙述确实也有失大方，但我想说的是，这里面已经发生的事，有各自的缘由，这些对我们都不重要，重要的是我们从这段历史中能得到什么启示？\n三点启示 #  读史使人明智，基尔代尔博士为什么没能创建一个微软？微软的商业模式在当时为什么可以如此成功？这里面至少有3点启示：\n 一，一定要开放，Unix于1969年就被开发出来了，但它却没有比7年后，1976年诞生的MS-DOS的前身——CP/M获得更多的用户市场； 二，一定要重视生态，IBM的OS/2 Wrap系统不比微软的MS-DOS系统做的好吗？当然不是，只因为微软先发制人，占领了市场先机，致使后来者即使再优秀也不能取而代之； 三，一定要有一个好的商业模式。在微软还没有起飞之前，基尔代尔博士的DR（Digital Research，数字研究所）公司在微机市场占有最大的市场份额，这种情况下为什么微软还可以发展起来？微软的商业模式既保持了生态上的开放性，在开放的同时又最大化保护了自己的利益。微软的操作系统是与硬件绑定的，厂家每卖出一个电脑，微软就会自动卖出一个系统。  计算机系统的进化史 #  为了了解微软为什么可以崛起，我们又必要先梳理一下计算机系统的发展史。\n开关编程 #   早期1946年世界上第一台计算机ENIAC诞生时，是没有操作系统的，那个时候计算机就是一台北京三室一厅那么大号的电子计算器，计算机小姐（Computer Lady，是真正的小姐，有知识有文化）需要在ENIAC上手动拨动开关，以进行编程。就像在计算器上按键一样，不是大号的计算器是什么？那个时候计算机的主要功能也是计算，和计算器没有区别。\n手动拨动开关进行编程的效率肯定低了，也容易出错。最主要的是计算效率低，有计算任务的人要使用计算机，只能一个一个排队来。\n纸带打孔编程 #  后来人们从可编程纺织机上获得了灵感，发明了纸带打孔编程。开关只有两个状态，不是0就是1，上机前先在纸带上把要输入的0、1数据在纸带上准备好，等计算机有了空，拿纸带往机器上输入就是了。用纸带打孔编程，不仅提高了计算机的利用效率，还减少了出错率，因为纸带方便多人检查嘛。\n   加里·基尔代尔一生赚了多少钱？ #  1981年，数字研究公司收入600万美元，基尔代尔本人财富1500万美元。\n写了多少书？有什么成就？ #  他喜欢教书，是位出色的教师，和学生关系融洽，出过几本著作。他的工作也使他有时间编程序。可以说，学术界的氛围让他如鱼得水。\nDOS是什么？ #  Disk Operating System的简写。DOS的功能其实是非常强大的，以及DOS软件拥有巨大的开发潜能，因为像Windows那样强大的DOS增强程序都可以编出来。\nGUI指什么？\nGraphical User Interface，图形用户接口，指采用图形方式显示的计算机操作用户界面。\n基尔代尔的生平 #  1942年5月19日，加里·基尔代尔出生于美国西北部的西雅图，他在那里生活到27岁。是盖茨的同乡。在高中，他并不是明星学生，他喜欢新奇的玩意儿和汽车。他设计制造过一个自动防盗报警器，一个用磁带录音机来使用摩斯代码的机器，和一个触发二进制转换器。他喜欢长时间地摆弄电话装置，其沉迷程度就像后来的黑客沉迷于计算机。\n1960年初，在基尔代尔上大学前两年，他在西雅图他父亲的航海学校任教。在那里，他对数学产生了浓厚的兴趣，但是航海是一个以老技术为主的领域。他去了华盛顿大学学习，本科念的是数学。刚进大学时，他选修了两门计算机编程方面的课程，这决定了他的将来。他用老式手工计算器进行数字分析方面的研究，但当他学完课程时，他已经涉入FORTRAN程序。他被计算机的缺陷所困扰，整晚把时间花在大学的计算机中心。1962年，基尔代尔与多露西·麦克艾文（Dorothy McEwen）结婚，他们的婚姻维持了20年，有两个孩子。\n越战开始，基尔代尔应征入伍。他加入了海军预备队，因此可以继续完成学业。他在罗德岛的军官后备学校呆了两个夏天。1967年，他获得计算机科学学士学位，留在华盛顿大学学习计算机科学的研究生课程。在大学的计算机中心，基尔代尔晚上在Burroughs 5500计算机上工作，通过它，基尔代尔学到了许多有趣的新概念，包括块存贮分配技术。深夜的时候，这台机器实质上是他一个人的。他为Burroughs 5500做ALGOL编译，这为他提供了编译经验，这也是他研究生学习的主攻方向。\n1969年初，在基尔代尔获得硕士后，他应召为军队服务，他有两个选择：登上开往越南的驱逐舰或在加利福尼亚蒙特雷的海军研究生院教计算机科学。“我只用了两毫秒就做出了选择。”他在美国海军研究生院教了三年计算机科学，又开始了博士生学习，方向是编译代码的优化，他的论文题目是《总流量分析》，用来决定如何使机器代码尽可能地简洁。1972年，获华盛顿大学计算机科学博士学位，参加了美国海军，秋天被分到加州蒙特利的美国海军研究生学院，担任电脑讲师，主要从事软件方面的研究。\n编写CP/M，开始发迹 #  1972年，他偶然发现在华盛顿大学公告板上有一则广告：“25美元卖一台微机”。因为教学需要，他买下了它，这是一台英特尔4004的4位微处理器，是第一台使用芯片的计算机。甚至当时没有人认为微处理器有什么用处，包括英特尔。此前，他一直用的是海军学校价值300万美元的IBM 360系统计算机。基尔代尔计划用这个芯片制作一一个导航计算器，他父亲一直想有一个可以计算导航三角形的设备。基尔代尔试着在4004上写一些技术性的程序，但很快意识到指令到指令集很有限。他又询问英特尔是否对他在4004上编的程序感兴趣，虽然英特尔对导航应用并无特别兴趣，但他们发现他的数学程序很诱人。\n以往，计算机存储数据、数据处理和数据控制三部分是分开的。微处理器的出现实现了使其三合一。因此程序也需要“微小化”。基尔代尔使用二级法，先在DEC的PDP-10小型机上为4004创建新的“微程序”。1973年，他参观了英特尔的微机部，当时这家刚刚创办的公司只有几间破房屋。基尔代尔与英特尔的人很投缘，他用每周一天的休息日担任英特尔的顾问。他不但喜欢上了新职务，而且也迷上了微处理器。不久英特尔又让他试用新出炉的8008，只用了几个月，基尔代尔创建了PC史上革命性的微处理程序设计语言PL/M，为微处理器赋予了真正的生命，打通了微处理器与微电脑的通道。它很容易被接受了，它用于大量的开发系统软件如字处理器、编辑器和汇编语言。然后，基尔代尔开始为8080微处理器开发PL/M的不同版本，这个芯片取代了8008，并成为微型计算机革命的真正开始。\nDOS之前，计算机是怎么运行的？ #  下面这个过程有点瑕疵。\n最早的大型机（1945）是打孔纸带，上面直接记录了机器码和数据，输出也是打孔纸带。也就是说是直接编写机器码运行。\n内存容量上来了之后出现了FORTRAN（1954）编译器，也是打孔纸带（评论指出：是打孔纸卡），但是内容变成了FORTRAN命令，易用性不可同日而语。但是FORTRAN过于偏向学术/数学用途，并不适合数据处理，数年后由计算机业界“灭绝师太”格蕾丝·赫柏主导定制了COBOL语言（1959），并大受政商领域欢迎。\n不过这些编程语言或多或少较为复杂，难于学习，达特茅斯学院的两位教授于1964年推出了BASIC语言。不过由于功能没有FORTRAN和COBOL强大，所以此时多作为教学使用。\n后来内存容量进一步增加，并且横空出世了一种彻底改变了人机交互方式的设备：终端（1963）。是一种电动打字设备，最重要的特性是可以接受主机端反馈自动敲打字符。相当用纸张实现了现代电脑屏幕的功能。\nK\u0026amp;R两位大前辈就用这样的设备编写了C语言和Unix（1969），黑暗时代终于结束。瞬间普及到了整个学术界。\n之后的许多大型机和小型机就这么用着Unix了。虽然有一些电脑公司试图推广自己的操作系统，但是大多数不成气候。不过IBM在Unix诞生的三年前推出了OS/360系列（1966），配合COBOL语言在政商领域一统江湖。\n到了70年代，集成电路迅猛发展，以前需要占地数平方米，用成千上万个电子管才能实现的功能现在用一块小小的芯片就能做到，“微机”的改念就此诞生。1974年，Intel的8080处理器面世，由于其完善的功能，市面上采用这款CPU作为主处理器的微机雨后春笋般推出。\n由于BASIC简便易用的特性，这些电脑的ROM之中通常提供了BASIC解释器，开机会自动进入BASIC模式，可以立即开始BASIC程序的编写。当然，也可以执行机器指令。不过汇编软件在当年是比较贵的产品，一般用户消费不起，都是商业公司在用。\n当时市面上清一色的8080/Z80微机，加里·基尔代尔看到了商机，于1976年推出了CP/M操作系统，适配市面上几乎所有的8080兼容微机一统江湖。这款操作系统的操作已经和DOS很接近了，但是缺少完善的目录系统（因为那时基本都用软盘，微机上几乎没有硬盘可用，没有需求）。\n之后，IBM于1981年推出PC-AT，本打算用CP/M的16位版CP/M-86作为操作系统，但是由于加里·基尔代尔傲慢无比的对应，让IBM耐心尽失，被比尔盖茨抓住机会承包了操作系统的开发，DOS 1.0便横空出世。而由于PC架构的开放性，许多厂商都纷纷推出自己的兼容产品，PC架构便迅速的统一了政商领域。不过由于一开始研发目标就是商务领域，虽然16位CPU性能较强，但音画方面非常孱弱，家用娱乐还是以各种8位机为主。\nUnix系统为什么没有流行？ #  当年IBM想搞一个完全公开的硬件体系，然后请了微软帮这个体系做操作系统。于是就有了这么一个合作，IBM PC 的这个公开标准，从那个时候开始确立，这就是我们现在使用的个人电脑。而大家也疯狂的涌向这个公开标准，更多的程序员为它制作应用。生态环境得以确立。而 Linux 直到多年以后才诞生，才开始支持这个体系。Linux本身来源于对Unix功能的实现，功能较多较复杂，早期PC的性能根本不足以流畅运行Linux，直到80386时代，才算是诞生了第一款能流畅运行Linux的PC平台。而这个时候，微软基于PC构建的生态环境已经非常稳固了。\nIBM 很可能非常后悔当年请微软来做这个操作系统而没有自己做，后来 IBM 做了 OS/2 Warp，系统本身非常优秀，当年IBM的实力也绝对不会比微软弱，可这个优秀的系统依然无法战胜微软。\nLinux常常被批评的所有缺点，OS/2 Warp 都没有，但它还是无法战胜微软。所以很多人以为的那些缺点其实并不是Linux无法战胜微软的原因。\n别说Linux，任何厂商都无法在桌面端战胜微软，哪怕提出 PC 标准的 IBM 公司也不行。真正的原因，就是先发优势。生态建立起来了，应用围着你转，后来者就没法进入。\n这个貌似没有回答。\n手机端，其实也差不多。在Android之前，硬件系统也都是封闭的，各家自己出硬件，然后自己做针对自家硬件的操作系统。基于Linux内核的Android是第一家允许手机端公开标准的硬件的智能操作系统，谁都能做，同时谁都可以自行定制操作系统。（当年的WP跟WM其实在硬件方面并没有Android那么开放）。于是这个系统也火了。后来者如果没有特别突出的优势也很难战胜之。微软想要搞WP已经是好几年以后的事，此时安卓已经完全站稳脚跟。\n甚至于，在编程领域也是如此：最流行，运用得最广泛，最有前途跟钱途的那些语言，绝对不会是垠神喜欢的那些优秀语言，不是从技术上最优秀的编程语言。而是生态最完备的语言。一个语言建立了有效的应用生态，有大量的现成代码，它就很难再被替换掉，很难再消失。\n这个貌似说生态很正要。生态的根本是联系，联系很重要。微软的商业模式，是与硬件绑定的，厂家每卖出一个电脑，微软就卖出一个正版的操作系统。\n杀手级应用对硬件厂商和操作系统的重要性？ #  任何一个生态的大规模普及过程中，都必然是有最少一款杀手级应用的推动。所谓的杀手级应用，是指用户愿意为了使用这款应用愿意去购买一整套新的系统——包括必要的硬件和操作系统。例如：\n  第一款普及的个人电脑（不是IBM PC）是苹果的Apple II，推动这款设备的杀手级应用是VisiCalc，一款类似Excel的应用。解决了大量企业制作、更新各种报表的需求。\n  IBM PC的普及是两款杀手级应用的推动：Lotus 1-2-3和WordStar。Lotus 1-2-3是VisiCalc的替代者，WordStar则是一款类似今天的Word的应用。Lotus 1-2-3/VisiCalc满足了企业管理者看报表的需求，WordStar则满足了文员对文档编辑方便的需求——在PC普及之前编辑文档有多麻烦，可以看看这个问题下的回答\n  Windows在桌面的普及过程中，杀手级应用是早期的Office系列和微软推出IE之前的Netscape（一个 浏览器，可能有些年轻的朋友不清楚）。\n  Linux在服务器领域的普及，杀手级应用是Apache和Nginx这两个网站服务器软件。\nMac半死不活撑下来了多年，最主要靠的视频行业的杀手级应用Final Cut；近十年来的重新抬头，则是开发iOS应用必须使用的Xcode。\n苹果的iPods：iTunes提供了成套完整的对个人音乐的管理系统，从分发、购买、下载到播放极其简单便捷。之前的MP3/MD等随身播放设备需要自行购买CD并转录或者从各种 音乐网站搜索下载，然后传输到播放设备上，并且因为容量有限用户经常需要频繁更换曲目/介质。\niPhone的普及有三个杀手级应用。iTunes：延续了iPod的成功，并且可以脱离PC/Mac独立使用；搭配大尺寸触摸屏的Safari：之前的智能手机要么只能看wap版的网页，要么键盘操作极其麻烦；搭配了大尺寸触摸屏，配合 双指手势可以便捷的缩小放大的Safari则是向用户提供了前所未有的移动浏览网页的体验。AppStore：不同于PC和之前的智能手机，软件要去下载网站/开发者官网购买/下载、自行安装，一个应用可以满足用户搜索、购买、下载、安装软件的需求。\nAndroid普及的杀手级应用则是GMS，一整套的 谷歌服务，涵盖搜索、浏览、相册、地图、邮件，以及模仿iOS上AppStore的Google Play。\n 游戏主机就更不用说了，PS系列Xbox系列都有自己独占的多个杀手级游戏，如 最终幻想、Halo等，但即便这两家巨头的在这个领域的垄断，任天堂的Wii依然凭借Wii Sport杀了出来。即便iOS/Android上有极其丰富的游戏，任天堂依然可以凭借 荒野之息、 奥德赛这两款游戏热卖，硬生生让一众游戏玩家的随身设备中多增加一个不能打电话不能拍照的Switch。\n  因为应用，最接近用户的需求。用户要买的不是系统，不是电脑，而是解决自己生产、生活中的实际需求。\n硬件驱动的问题，主要是存储厂商的官方支持不够。这个问题还是源于freebsd团队本身，linux内核和驱动的书还有那么几本，freebsd呢，完全没有。想写freebsd的驱动，你还得先去学写linux的驱动，然后还要看一大堆文档和源码。大部分人学会了写linux的驱动后，为什么还要多此一举的去学写fb的驱动呢？ 因此fb的驱动开发者数量很少。硬件厂商找个团队开发for freebsd的驱动的成本太高。 如果freebsd在普及方面下点功夫，情况会好得多。\n还是开放与生态的问题，硬件不开放，生态没有建立起来。\n老式打字机的麻烦之处 #  有一种非常神奇的机械式铸排打字机叫Linotype，一人多高，用金属字模和熔化的铅现打现铸，铸出来每行字都是一整个铅块，可以直接拿去印刷，看上去非常 蒸汽朋克。这种机器和同类产品在西方新闻行业上百年几乎处于垄断地位，直到计算机兴起才逐渐被取代\n 这种机器要是打错一个字，要把机匣打开，把错字挑出来，再倒回去重新调整行距等等，非常麻烦，也不能直接另起一行，因为换行会导致这一行自动被送去浇铸，这一行字模不够的话，浇铸腔填不满，会导致 铅水飞溅出来十分危险。所以打字员发明了一种非常省事的办法，直接照着键盘刷一下撸过去，出来几十个字把这行填满停机，然后在下一行重新打过。铸出来的 铅块里直接抽掉错误的一行就是了\n 这种打字机因为是出版行业用的，键盘设计按照英语字母使用频率排列，左手第一列第二列分别是etaoin shrdlu。有时候打字员疏忽没把错行挑掉，这串字就印到报纸上了。久而久之连行业外的人都知道了这串字，甚至收录进了词典，维基百科也有这个词条\n 倒数第三行就打错了。\nCP/M恰恰是因为开放与兼容而成功的。微软在CP/M的基础之上，控制了开放性，通过与微机电脑厂商绑定，保证了MS-DOS/Windows系统普遍推广开来，而取得了巨大的成功。微软的成功，是与时俱进、乘风而起的成功。比尔盖茨如果不退学，创立微软的可能就是另一个家伙了。\n参考 #  作者：pig-10 链接：https://www.zhihu.com/question/300351576/answer/520194587 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n作者：pansz 链接：https://www.zhihu.com/question/326164970/answer/996071332 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n作者：柴健翌 链接：https://www.zhihu.com/question/24628822/answer/472088712 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n作者：知乎用户FgYsEo 链接：https://www.zhihu.com/question/23713616/answer/33635688 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n"},{"id":3,"href":"/guestbook.html","title":"Guestbook","section":"Hi","content":"Guestbook #  在下方评论区留言。\n"},{"id":4,"href":"/about.html","title":"关于作者","section":"Hi","content":"关于作者 #  李艺， 腾讯云最具价值专家（TVP），微信学堂 《小程序性能优化实践》讲师，极客时间 《微信小程序全栈开发实战》讲师，一汽大众等企业内训讲师，《小程序从0到1》《微信小游戏开发》等图书作者。视频号/公共号「艺述论」作者。\n学编程就像登山，一步一个台阶，没有人学不会。\n联系方式 #   QQ：9830131 Weixin：同上 Email：9830131#qq.com  当您添加别人的微信时，如果您没有写明备注，我想您也不会介意对方拒绝。\n赞赏 #  如果觉得这个博客对你有帮助，欢迎扫码打赏博主。\n支付宝 微信 PayPal PayPal.Me/coderliyi "},{"id":5,"href":"/categories.html","title":"Categories","section":"Hi","content":"Categories #  "},{"id":6,"href":"/tags.html","title":"Tags","section":"Hi","content":"Tags #  "}]