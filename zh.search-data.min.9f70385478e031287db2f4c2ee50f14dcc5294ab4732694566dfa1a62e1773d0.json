[{"id":0,"href":"/posts/2022/0910.html","title":"节日填词一首：⽔调歌头・2022中秋数字化展望","section":"Posts","content":"节日填词一首：⽔调歌头・2022中秋数字化展望 #  ⽔​调歌头・2022中秋数字化展望 #   \n时代有需要，数字必超前。未来钻石年代，何事会翻番？姣月朝朝高挂，墨客年年作雅，恒变是真言。\n命运眷过甚？参照有前篇。慕高士，追大佬，站前沿。不应陷入，娱乐知识的狂欢。人有沉浮兜转，月有阴晴寒暖，有事往前看。但行教之道，桃李满天边。\n数字化时代随想​ #  2021年，我国发布了「第14个五年计划和2035远景⽬标纲要」及「⼗四五数字经济发张规划」。\n⽂件指出，国家在未来13年内，要⼤⼒发展数字化产业，⼤⼒推进全⾏业全⽅⾯数字化深度改⾰，将数字化夯实为⼀项起跑线能⼒。其中软件和信息技术服务⾏业，从2020年到2025年，5年之间要实现产业规模翻倍增长。\n我们可以这样理解，未来科技⾏业，尤其是软件和信息技术服务⾏业，是未来13年内的黄⾦钻产业，它值得所有仁⼈志⼠为此前仆后继。\n物竞天择，适者⽣存，在快速变化的时代洪流中，有⼀些⼈注定将被时代抛弃，同时另⼀些⼈将被时代眷顾。天上明⽉⾼挂，⼏千年来，年年有⼈看到它，对着它赋诗填词。变得是⼈，不变的是⽉亮，还有亘古不变的「变化」的道理。\n谁会受到眷顾呢？回顾上⼀个世纪70、80年代，美国的盖茨、基尔代尔、乔布斯和肯·汤普森这些⼈的事迹，见上⼀篇⽂章：比尔盖茨到是一个怎么样的人？如果你是基尔代尔，面对微软的商业竞争你会怎么做？\n⽆论是做学者稿研究，还是经商在科技⼤潮中乘风破浪，他们都⾛在了时代前沿。今天如果你也想在科技浪潮中有⼀番作为，必须⾛在时代的科技前沿。\n \n怎么才能⾛在时代前沿呢？\n要关注前沿的⽜⼈他们在做什么，他们在说什么，他们在看什么。有⼀个组织，它是⼀个把各⾏各业⽜⼈聚集起来的组织，你不必到处找⽜⼈，也不必因为找到了以后⽜⼈不理你⽽苦恼，你只需要关注这个组织就可以了。\n这个组织⼀直都在聚集⽜⼈，并积极组织⽜⼈发声。再也不要沉迷于娱乐视频、情绪泛滥的⾃媒体信息、⼼灵鸡汤和娱乐知识的狂欢之中了，这样的组织才是真正值得你花时间关注的，如果你还没有退休的话。\n另外还有⼀个平台，它针对这⼀时代契机，发布了结构完备的数字⼈才粮仓模型，指出了时代的数字化需要。\n \n如果你想参与数字化时代变⾰，关注这个组织的账号，学习⽜⼈的视⾓，在这个平台上学习⽜⼈的经验，这样就可以了。\n我作为⼀名普通的程序员，很早⼀直也是这么做的，后来我成为了这个组织中的⼀员，也有幸在这个平台上发布了⾃⼰的课程。\n现在我作为⼀名计算机⽼师，已经开始为国家培养软件和信息技术服务⼈才⽽努⼒，我专注的路径是：通过BPL实战教学思想，在⼀个项⽬中传授⼀个整体的职业发展道路上所需的基本技能，快速培养数字化转型⼈才和新型⼈才。\n最后说⼀下上⾯提到的组织和平台，她们是腾讯云TVP和极客时间。\n当然国内优秀的软件和信息技术学习平台不⽌有极客时间，还有⽼牌的CSDN和发展势头猛劲的51CTO，她们也是⾮常优秀的程序员社区与平台。\n  https://csdn.net/  https://www.51cto.com/  下⾯，根据上⾯的随想，即兴填词⼀⾸，见开头。\n最后说一下封面，这是腾讯云TVP组织 寄送的中秋节\u0026amp;教师节礼物。非常漂亮，有三个色可以变换。设计也非常简洁，触摸式开关，可充电，也可离电单独使用。\n2022年9月10日\n"},{"id":1,"href":"/posts/2022/0909.html","title":"比尔盖茨到是一个怎么样的人？如果你是基尔代尔，面对微软的商业竞争你会怎么做？","section":"Posts","content":" 基尔代尔果然是一位学者企业家。他有企业家的敏锐嗅觉和欲望，但同时又保留了学者的锐意创新和儒雅。他一只脚踏在了商业领域，另一只脚踏在了学者领域，只有他这样的人，才能开发出符合市场需要的CP/M，肯·汤普逊和比尔·盖茨都不可以。\n 比尔盖茨到是一个怎么样的人？如果你是基尔代尔，面对微软的商业竞争你会怎么做？ #  这个问题应该没有什么标椎答案。我阅读了一些相关资料，有人说基尔代尔博士是一位计算机发展史上完全被低估贡献的极客，还有人说钱是万能的，历史的小姑娘被人打扮了，比尔·盖茨在他的著作《未来之路》中刻意将卖给他QDOS（一个DR-DOS的变种）的蒂姆·帕特森捧了出来，淡化了基尔代尔在DOS系统发展史上的贡献。甚至称通过抄袭赚了7.5万美元的蒂姆·帕特森为「DOS之父」，天哪，哈哈，如果蒂姆·帕特森是DOS之父，那么基尔代尔博士在历史上又做了什么？\n对此我有不同的看法。历史是一个小姑娘，谁都可以打扮，既可以往左打扮，也可以往右打扮；比尔·盖茨的书不可以全信，但借此批评比尔·盖茨的文章也未必值得全信。基尔代尔博士在DOS发展史上的贡献毋庸置疑，盖茨在《未来之路》中的叙述确实也有失大方，但我想说的是，这里面已经发生的事，有各自的缘由，这些对我们都不重要，重要的是我们从这段历史中能得到什么启示？\n三点启示 #  读史使人明智，基尔代尔博士为什么没能创建一个微软？微软的商业模式在当时为什么可以如此成功？这里面至少有3点启示：\n 一，一定要开放，Unix于1969年就被开发出来了，但它却没有比7年后，1976年诞生的MS-DOS的前身——CP/M获得更多的用户市场； 二，一定要重视生态，IBM的OS/2 Wrap系统不比微软的MS-DOS系统做的好吗？当然不是，只因为微软先发制人，占领了市场先机，致使后来者即使再优秀也不能取而代之； 三，一定要有一个好的商业模式。在微软还没有起飞之前，基尔代尔博士的DR（Digital Research，数字研究所）公司在微机市场占有最大的市场份额，这种情况下为什么微软还可以发展起来？微软的商业模式既保持了生态上的开放性，在开放的同时又最大化保护了自己的利益。微软的操作系统是与硬件绑定的，厂家每卖出一个电脑，微软就会自动卖出一个系统。  计算机系统的进化史 #  为了了解微软为什么可以崛起，我们有必要先梳理一下计算机系统的发展史。\n开关编程 #   \n1946年，为给美国陆军的弹道研究实验室（BRL）计算火炮火力表，世界上第一台图灵完备的电子通用计算机ENIAC诞生了，开始它还没有操作系统。那个时候它就是一台北京三室一厅那么大的电子计算器，计算机小姐（Computer Lady，是真正的小姐，有知识有文化）需要在ENIAC上手动拨动开关，以进行编程，就像在计算器上按键一样。\n \n靠手动拨动开关进行编程的效率肯定低了，也容易出错。\n第一台家用计算机阿塔尔8800 #  1974年面世的阿塔尔（Altair）8800，如下所示，它由美国微型仪器和遥测系统（MITS，Micro Instrumentation and Telemetry Systems）公司，基于Intel 8080微处理器实现，它是第一款取得商业成功的家用计算机。当时还在哈佛读书的比尔·盖茨与其小伙伴保罗·艾伦一起为Altair 8800设计了Altair BASIC编辑器，这款编译器后来变成了Microsoft BASIC，成为了MS-DOS系统的基础，后来又变成了Microsoft QuickBASIC，最后成为了今天依然流行的Visual Basic。Microsoft在命名上也以Micro开头，可能收了MITS的影响。包括比尔·盖茨退学创建微软，也可能与这次成功的外包经历有关。注意这个时间，1974年，比基尔代尔博士发布CP/M，还有二年时间。\n 注意：BASIC并不是比尔·盖茨设计的，最原始的BASIC语言是在1964年由约翰·克米尼和Thomas E. Kurtz设计的。\n  \n阿塔尔8800虽然是一课家用计算机，但要给他编程并不容易，要拨动面板上的开关，靠输入二进制操作码输入数据（一堆0和1），然后按「存储键」把临时值写入内存。注意，这时候计算机已经有了内存了。\n待到把整个程序都写入内存后，推动开关，内存地址重设为0，按「运行」按钮，灯闪烁起来，阿塔尔就开始运行了。下一次如果要计算别的什么，重新再来一遍开关编程，阿塔尔与其说是一个电脑，不如说是一个大玩具。\n打孔机编程 #  人们或许从早期可编程纺织机上获得了灵感，发明了打孔机，专门给纸卡打孔。开关只有两个状态，不是0就是1，上机前先在纸带上把要输入的0、1数据准备好，等计算机空闲了，拿纸卡往读卡器一插就可以了。用打孔机编程，不仅提高了计算机的利用效率，还减少了出错率。\nIBM在1964年推出的IBM 029打孔机是当时打孔机的代表，如下所示：\n \nIBM 029是作为IBM System/360 大型电脑的配件而发售的，用IBM 029打出一种一种打孔卡，如下所示：\n \n将这种打孔卡插入IBM System/360，计算机就可以自动输入数据，已经不再需要波动开关了，计算机小姐们觉得太幸福了，此时离1946年ENIAC诞生已经过去了18年。\nENIAC作为第一台图灵完备的电子计算机，后来它其实也是有打孔机和读卡器的，如下所示，在房间位置的下方，放置的便是读卡器和打卡机，而上方及左右两侧都是计算模块，最多的是累加器。区别是什么？ENIAC是军用的，而IBM 026和IBM System/360是商用的。\n编程语言的进化史 #  编程语言在计算机的发展中，起到了决定性的作用。如果不是编程语言作为工具可以持续创新，计算机不会发展的如此迅猛。\n助记符和汇编语言A-0（1952） #  打孔机编程有一个问题：不支持循环和跳转。如果某段机器码想要再执行一遍，计算机小姐们必须将纸带环过来，再输入一遍。\n还有，在使用打孔机制作纸卡时，科学家们往往会事先把要输入的机器码内容写在纸上，这也很好理解，因为谁也不可能把成百上千张数据全部记在脑子里。而为了记述和理解方便，往往会在机器码旁边写上助记符。举个例子：\n10010 1110 # LOAD A 这段机器码0010是操作吗，1110是数据吗，整段表示将内存中的值复制到寄存器A。行尾的LOAD A就相当于是助记符。在打卡机编程时代，计算机小姐输入的是0010 1110这样的机器码，并不是LOAD A这样有自然语义的助记符。\n这时候有一个聪明的第一代计算机小姐葛丽丝·霍普（Grace Hopper）博士，她想，既然有助记符，为什么还要写机器码呢？人类通过键盘（当时早已经有打字机键盘了，打字机的出现比计算机早）向计算机输入助记符，先存在内存里（当时图灵完备的计算机也已经有内存了），然后由计算机负责将助记符翻译为机器码，翻译以后再运行，这样不比直接写和输入机器码更高效吗？\n \n这是一个了不起的想法，葛丽丝·霍普据此实现了算术语言版本 0（Arithmetic language version 0），简称A-0，或称A语言。A语言已经是一个汇编语言了。A-0之后还出现过A-1、A-2、A-3等，或许由于理念太先进，或许因为配套设备不齐全，A语言并没有流行起来。这一年是1952年。\nFORTRAN（1957） #  几年以后，IBM 在 1957 年发布了公式翻译程式语言FORTRAN，它的名字是英文Formula Translation的简写，如下所示是一个Hello World示例。\n1Program main 2Implicit none 3write(*,*) \u0026#34;Hello World!\u0026#34; 4End program main FORTRAN的开发者想，既然计算机可以翻译，并且要这样做，那么为什么不做的更彻底一些呢？于是FORTRAN的语法相比A语言，更易读、易懂，它是第一门面向过程的有函数和变量支持的编程语言，FORTRAN主宰了早期的计算机编程。\nFORTRAN以后，计算机编程语言开始了长足发展。\nCOBOL（1960） #  1959年5月，美国国防部委托葛丽丝·霍普博士制定COBOL语言标准。霍普为了A-0奔走演讲多年，在FORTRAN语言发布之后，终于得到了世人的重视。但霍普实际上并不是COBOL的编写这，当时有一个6人的编写小组，他们把自己关在一个酒店里，基于霍普已有的工作基础，两周时间完成了COBOL首版的开发。这大概是人类历史上有记载的最早的封闭式开发。\nBASIC（1964） #  1964年，达特茅斯学院的两位教授约翰·克米尼和Thomas E. Kurtz，推出了BASIC语言。这个语言没有FORTRAN和COBOL强大，它主要作为教学使用。1977年主动从哈佛退学的学生比尔·盖茨，自然是可能知道和学习过这门语言的。\nB语言（1969） #  大约1969，美国贝尔实验室的计算机科学家──肯·汤普森，如下所示，他想在Unix系统上开发一个Fortran编译器，后来因为在编写过程中引进了另一种编程风格，改着改着，就形成一们新语言——B语言。B语言在命名上是为了向A语言致敬，以表达谦逊之情；我们周围有些程序员不是这样，在别人某个东西的基础上搞了点东西，就命名为某+，或者某Pro、某Super，总是标榜高出别人许多。\n \nUnix系统也是在这一年开始开发的。\nUnix系统与C语言（1969-1973） #  大概在1969年至1973年间，贝尔实验室的丹尼斯·里奇与肯·汤普逊，以B语言为基础，当时他们为了移植与开发UNIX操作系统，还有玩一款游戏，无意中设计和开发出了C语言。如下所示是一个C语言版本的Hello World程序示例：\n1#include \u0026lt;stdio.h\u0026gt;2int main(void) { 3 printf(\u0026#34;Hello, world!\\n\u0026#34;); 4 return 0; 5} 当时贝尔实验室有一台PDP-7计算机，如下所示。肯·汤普逊是一为当之无愧的计算机大佬，他在1966年写过一款名字叫Space Travel的游戏，估计是使用FORTRAN编写的。他先是为了在闲置的PDP-7上玩这款游戏，想写个高效的FORTRAN编译器，不小心发明了B语言。\n \n后来新的编译器完成了，B语言也有了，仍然对游戏的流畅度不满意。于是，开始重写PDP-7的系统，即Unix系统，并在这个重写的过程当中，和他的同事丹尼斯·里奇一起，发明了C语言。\n大神的创造力真不是盖的，没有游戏，写一个，没有趁手的编程语言，写一个，操作系统不高效，写一个。在大声眼里，语言和系统一样，都是工具，都是可以随手打造的。\nUnix系统诞生的时间大概在1970年。\n操作系统的进化 #  基尔代尔在现代磁盘操作系统的发展上确实功不可没，他通过DR公司在商业上赚了不少钱，这与他早期积极编写程序并尝试卖给Intel有关，他因次洞悉到了更多的前沿需求。\n基尔代尔创造PL/M编写CP/M（1973-1974） #  Unix系统诞生这么早，为什么没有发展起来呢？\n \n原因大概有两个：\n 两位作者是实验室的研究员，对商业化运作不敢兴趣，只对写游戏、玩游戏感兴趣； Unix系统是封闭的，不具有开放的生态，没有快速发展的土壤。  1972年，基尔代尔博士（如下所示）偶然在华盛顿大学公告板上看到一则二手出售广告，有人以25美元的价格卖一台装备英特尔4004微处理器的微机。基尔代尔买下了它，相比300万美元的IBM 360计算机，这台微机实在太便宜了。\n \n与肯·汤普森不同，基尔代尔对赚钱感兴趣，他与几名程序员为4004编写了一个游戏程序，他们找到英特尔的老板罗伯特·诺伊斯推销这个程序。英特尔不感兴趣，诺伊斯深信微处理器的未来在其他方面，当基尔代尔问他在什么地方是，他认真地说：“可能在钟表方面。”\n不过英特尔发现基尔代尔有出色的数学程序编程能力，于是邀请他到英特尔参观，并请他担任顾问。1973年，基尔代尔应邀参观了英特尔的微机部。基尔代尔与英特尔的人很投缘，他用每周一天的休息日在这里担任顾问。基尔代尔很喜欢这个新职务，也迷上了微处理器。\n不久英特尔让基尔代尔试用新出炉的8008，只用了几个月，基尔代尔就创建了计算机历史上具有革命性意义的高级结构性汇编语言PL/M（Programming Language for Microcomputers的简写，中文微机程序设计语言，1972年创建），并用该语言在1974年编写了微型计算机操作系统CP/M（Control Program for Microcomputers的简写，中文微机控制程序）。注意这里的CP/M是程序，并不是系统，因为在当时的人眼里，系统是不存在的，所谓的CP/M就是一个大程序。\n基尔代尔随后开始为8080微处理器开发PL/M的不同版本，8080芯片取代了8008，并成为微型计算机革命的真正开始，后来出现了耳熟能详的80386、80486等微处理产品。\nCP/M的意义在哪里？ #  以往，计算机的硬件和软件是分开的，普通人即使购买了Intel 4004或8080的微处理器，也无法直接使用，微处理器必须装在一个计算机内，并且这个计算机内还要预装一个专用的计算机系统才能使用。而在当时1973年，像贝尔实验室的Unix系统、IBM的OS/360系统都是封闭的，普通人是拿不到的。基尔代尔的CP/M，就是Intel微处理器的一个软件系统，有了这个系统，任何人都可以基于Intel微处理器做定制开发。\n这个时期出现了很多极客，他们喜欢自己动手DIY自己的电脑，同时期的微软联合创始人保罗·艾伦，还有苹果的联合创始人史蒂夫•沃兹尼亚克，都是这时期开始玩电脑的，包括比尔•盖茨也是。后来出现的Windows95、Windows98，其实是在DOS系统上开发的一个大程序。而DOS系统，是Disk Operating System的简写，它鼻祖就是基尔代尔的CP/M。也正因为如此，人们普遍认为基尔代尔是磁盘操作系统的鼻祖，是计算机图形用户界面（GUI，Graphical User Interface，图形用户接口）的先驱，他在计算机历史上的地位被严重低估了。而这种低估，与比尔•盖茨的小气是分不开的。\n基尔代尔自己把CP/M叫做BIOS（基本内存输入输出系统），它适用于任何极客DIY电脑。BIOS作为通用部分，极客可以自己对它进行修改，以使他们的磁盘驱动可以与计算机相匹配（当时有不同的磁盘硬件）。这种设计，使得CP/M容易被人们所接受。\nDR的没落与微软的崛起 #  基尔代尔后期困在了自己的思想里，未能与时俱进，不然创建微软商业帝国的人可能就是他。商业有商业的规则，在商言商，经商与做人、教书还是不同的。\n基尔代尔失败的占星机项目 #  虽然CP/M很牛逼，但它的发展十分奇特。当时基尔代尔一边教书，一边和朋友基于CP/M做了一个占星机的项目。他俩对占星术既无兴趣也不相信，但他们都认为这个项目的销路会不错。朋友造机器，基尔代尔编程序，两人软硬结合，很像苹果和微软开始的联合创始人组合。\n他们把这种占星术既机器放在旧金山市内许多地方的杂货铺，吃着25美分的硬币，印出算命天宫图，基尔代尔觉得这台机器美得很。可是顾客却大为不满，因为机器吃进去硬币，纸就堵成一团。基尔代尔不得不承认，占星术项目在商业上完全是一个失败。\n基尔代尔的数位研究公司（1976年） #  1976年，基尔代尔离开学校，与妻子多露西一起创办了一个数字研究所（Digital Research Inc.），只看这个名字，就知道老板是一位学者企业家。公司由妻子多露西负责经营，这个公司的商业模式很简单，就是卖基尔代尔编写的CP/M系统。\n1976年多露西曾怀疑公司能赚到的钱会超过1.5万美元，而事实上它赚了60万~80万美元。在开始的五六年中，公司的收益每年都翻了一番，1981年销售额达到520万美元，三年后更是达到了4460万美元。CP/M成了70年代、80年代初最有影响力的操作系统，到20世纪80年代中期，它运行在300种计算机模型上，有3000种软件支持CP/M机，CP/M成了当时的事实标准。\nDR公司连续运营了十几年，为基尔代尔夫妇带来了大量财富。1974年，基尔代尔帮助创建了硅谷最富盛名的“家酿俱乐部”（Home Brew Club），他还出过基本著作，可谓已经是人生赢家。\n基尔代尔与他的妻子多露西只维持了20年的婚姻。1994年7月，年仅52岁的基尔代尔在加州蒙特利的寓所头部撞地，三日后不治身亡。一个多才多艺的飞行员、大学教师、软件编程大师、作家和计算机先驱，就这样走了，但今天很多人并不知道他的存在。\n来自IBM的机遇，微软开始崛起 #  1980年，IBM准备开发IMB PC系统，因为IBM与微软的比尔·盖茨有过合作，首先找到了他。但盖茨和基尔代尔的数字研究公司有个不成文的协定，那就是比尔·盖茨不能涉足操作系统领域，同时数字研究公司也不进入比尔·盖茨的程序语言范围，于是比尔·盖茨慷慨地将IBM的代表介绍给了基尔代尔。当时比尔·盖茨认为，DOS操作系统并不是未来，程序设计语言与良好的杀手级应用软件才是未来。\nIBM与基尔代尔约好在一个秀丽的加州太平洋林园见面。会谈的结果很不理想，有人说这位基尔代尔博士骄傲自大，所以当IBM带着一生难遇的大生意找他的时候，他竟然驾着他的双引擎小飞机兜风去了（当时他已经通过DR赚了很多钱），只留下他的太太多露西和IBM打交道。面对IBM一大堆不泄密的限制协议，多露西很不乐意，大部分时间都在讨价还价上，双方达成的唯一协议就是要数字研究公司不泄露IBM来访这件事。生意吹了。\n随后盖茨自告奋勇揽下了这笔生意。但是编写一个操作系统并不太容易，而IBM要求几个月内就完成。这时候，盖茨的合伙人保罗·艾伦发挥了作用。他找到了一位极客蒂姆·帕特森，从他手里购买了QDOS（Quick and Dirty Operating System），付了大约7.5万美元。QDOS显然是蒂姆·帕特森在DR-DOS（基尔代尔公司的产品）的基础上修改过来的。微软将QDOS改名为MS-DOS，修改一下，倒手卖给了IBM，开始了微软的飞黄腾达之路。\n1981年，IBM推出第一台带有PC-DOS。基尔代尔看到后怒了：“我对和CP/M的相似感到惊讶，它们太相像了，系统功能简直一模一样。”\nIBM和微软可能因此面临诉讼，但当IBM的人和基尔代尔接触以后发现，基尔代尔只是希望IBM在以后的PC电脑中采用他的下一版CP/M。IBM当然乐于从命，微软也躲过了致命一劫。\n1983年底，基尔代尔的DR公司又推出了Concurrent（并发）CP/M，其优点是计算机用户可以同时做几种操作，比如在打印机打印时，可以同时写信，这在今天就是一个理所当然的功能，但在基尔代尔的发明之前，电脑是单线程的，同时只能做一件事。\n新的多任务操作系统很棒，它在1984年问世时，获得了巨大的成功。但有点迟了，到了20世纪80年代末，微软的MS-DOS已经成为操作系统上的事实标准。\n微软的商业模式 #  在DR和IBM已经占领大量市场份额的时候，微软还能崛起，全靠它的商业模式。微软既不像DR，只卖系统，又不像IBM和苹果，卖系统与硬件结合的整体。微软将自己的MS-DOS与微机厂商绑定起来，厂家每卖出一个电脑，微软才卖出一份系统。并且，MS-DOS只卖40美元，DR-DOS的售价几乎是它的6倍。\n还有，在用户这一侧，根本感受不到微软在赚他的钱啊，在当时电脑贵40美金，少40美金，用户根本不敏感。还有，微软提供了替换WordStar、VisiCalc的Office套件，Office又不是开源的，想要使用Office，就必须购买预装有MS-DOS系统的电脑。\n而另一边，基尔代尔的DR公司本来具有先天优势，却不肯适合变换自己的商业模式。基尔代尔没有学习微软的绑定销售模式，他决定不与编写WordStar、VisiCalc之类的软件公司进行一对一的直接竞争，他认为与自己的客户竞争，有昧自己的良心，是不道德的。\n基尔代尔果然是一位学者企业家。他有企业家的敏锐嗅觉和欲望，但同时又保留了学者的锐意创新和儒雅。他一只脚踏在了商业领域，另一只脚踏在了学者领域，只有他这样的人，才能开发出符合市场需要的CP/M，而肯·汤普逊和比尔·盖茨都不可以。\n小结 #  从以上Intel、IBM、微软、DR公司的故事中，你学到了什么呢？比尔·盖茨确实是一位商业奇才，他在上大学的时候，就敏锐第嗅到了PC电脑的商机，毅然退学创办了微软，幂幂之中好像命中注定一样，好像有什么东西在指引他前进。\n当他需要从蒂姆·帕特森手里买下QDOS的时候，他没有犹豫。他在DR和IBM商业经验的基础上，开创了微软独特的商业模式。在Windowns 98之后，微软抛弃了MS-DOS系统架构，只保留了Windows NT架构，这个架构曾经给微软带来了非常成功的Windows 2000服务器系统，即使在中国，都卖出了许多付费拷贝。我们今天使用的Windows 7/10/11，以及Windows Server系列的系统，均是基于Windows NT。而Windows NT（Windows New Technology），源于微软与IBM合作过的OS/2系统，后来两个公司理念不和，各自开发，成就了后来的微软。Windows NT与CP/M已经彻底没有了关系。\n \n关于Windows NT系统的更新历史，可以查看这个链接：\n https://zh.m.wikipedia.org/zh/Windows_NT\n2022年9月9日\n"},{"id":2,"href":"/posts/2022/09082.html","title":"「坠落」观影有感，观众最大槽点：苹果手机能用三天？","section":"Posts","content":"「坠落」观影有感，观众最大槽点：苹果手机能用三天？ #   我的天，恐高勿看！（注意：影评都含有一定的剧透，介意请马上关上！）\n  铁塔太高了，没有信号，用鞋子搭载手机扔到塔下求救，失败了。\n  遇到烧烤露营的人，发信号弹求救，结果人家不但不救她们，还把她们的车偷走了。\n  然后就是使用无人机尝试向旅店送信，结果无人机过马路没有看红绿灯，被卡车撞碎了。\n  最后，最后，还是靠把手机扔下塔（借助闺蜜），发出求救信号得救的。\n  主角本来是在闺蜜的建议下，通过极限运动克服之前一个极限运动留下的情感阴影。现在好了，阴影更深啦。不过，失恋的阴影应该已经走出来啦。\n影片从闺蜜下塔拿包，剧情就开始高度紧张。闺蜜的死亡反转，是全局一大亮点，相信这一点会促使你倒回去再看二遍。\n从创作技法上讲，代入感很强。骨肉亲情、生死之交、侵夺背叛，容易产生代入感的三个方面都涉及到了，代入感想不强都很难。\n如果再能设计一点集体荣誉、弱势群体因素进去就更强了：\n  例如，在集体荣誉方面，可以让闺蜜参加一个极限主播大赛，主角和闺蜜为了获胜拿奖，必须参与这次挑战。\n  还有，在弱势群体方面，可以把主角和闺蜜设定为非法移民群体，甚至肤色都可以变成黑色，也可以让旅馆的人发现碎在马路上的直升机，看到了纸条，但没有人愿意选择来救她们，因为她们处在社会的最底层，命不值钱。如果这样设定，露营的人不救她们还偷车，就更容易站住脚了。还有，往宏大了讲，社会教育意义还附加上了。（该死的教育意义）\n  最后说一下，有人质疑为什么不用无人机把手机送下塔，还有两人的运动装备根本不专业，背包没有上双险，保命绳也不长，还有一个最大槽点：苹果手机能用三天？好吧，如果导演没有从水果商那里拿到一份广告费的话，确实应该换一个手机品牌。\n等等吧，确实有一些不严谨的地方，但电影或小说，主要是帮助观众释放情绪的，情绪占第一位，逻辑什么的其实不太重要。\n 最后附一个在线试看链接：https://www.olevod.com/index.php/vod/play/id/38429/sid/1/nid/1.html，请支持正版。\n 2022年9月8日\n"},{"id":3,"href":"/posts/2022/0908.html","title":"从金庸武侠小说中文字的疏密，与齐白石草虫国画中的写意与写实，看如何加快节奏？","section":"Posts","content":"从金庸武侠小说中文字的疏密，与齐白石草虫国画中的写意与写实，看如何加快节奏？ #  我很早就注意到了这种现象，今天分享出来与朋友们探讨，并且这种艺术处理技巧，不止可以应用在武侠小说的创作中，在计算机技术图书的写作中，应该也是可用的。本质上，都是用最精简的文字，表达最丰富的内涵。我们的古代文字都比较简洁，惜字如金，甚至标点都要略去，这除了节省竹简的考虑，应该还有艺术表达上的简洁需要。\n武侠小说中文字的疏与密 #  先看武侠小说中文字的疏密，以我最喜欢的金庸先生的小说《侠客行》为例，世纪新修版下册第605页有这样一段文字：\n 闵柔颤声道：“谢天谢地，终于\u0026hellip;\u0026hellip;终于打听到了这女子的下落，师哥！咱们\u0026hellip;\u0026hellip;咱们赶着便去。”石清点头道：“是。”二人当即向白自在等人作别。\n 这段话，作者写在石清、闵柔知道了梅芳姑在熊耳山枯草岭之后，前面二人的对话都是实写，最后一句，以“二人”开头的，是虚写。二人是怎么向众人作别的，没有戏写。为什么没有实写？因为不需要啊。另外，这里为什么单提了一下白自在，因为下面就是白自在与他们夫妇二人的对话。\n石清、闵柔早不知道梅芳姑的下落，晚不知道，偏偏在这个时候知道，为什么？这是金大导演安排的。侠客岛归来，《侠客行》前面的剧情都写完了，就剩下熊耳山最后的一幕剧情了。石破天在海上救了师父、阿秀之后，作者特意安排的这个桥段，就是为了引出熊耳山的后续剧情。\n再看一个疏写的例子，同册第611页：\n 众人的目光一齐都向石破天射去，人人心中充满了疑窦：“梅芳姑是处子之身，自然不会是他母亲。那么他母亲是谁？父亲是谁？梅芳姑为什么要自认是他母亲？”\n 在这一段的开头，“众人”便是疏写，将众人的心思并在了一起。这在电影中是没有办法直接用镜头变现的，替代的方式只能用旁白。有时候我们说小说比电影好看，也在于此。\n「疏」写大致主要有两种情况：\n 一，将几个人的言行、心思并在一起写； 二，高度概括内容，相当于是语言的白描手法。  还有一种简写，虽然不是「疏」写，但能让文字更少。看一个同册第606页的示例：\n 他此刻的轻功何等了得，转瞬间便上了山岭，绕过一片林子，到了几间草屋之前。只听得狗吠声响，一条黄狗从屋中奔将出来，扑向他的肩头。石破天一把搂住，喜叫：“阿黄，阿黄！你回来了。我妈妈呢？”大叫：“妈妈，妈妈！”\n 这一段中，“石破天一把搂住”，搂住什么？缺少宾语。还有后面的“大叫”，谁大叫？缺少主语。从语法上似乎有点毛病，但语句极其简洁，文学表达效果也更好了。奇怪不？少了文字，语法不全，效果还更好了。这是精简语句，让文字更为简洁高效的方法。\n下面看「密」写的例子。这样的例子书中有许多，仅举一例：\n 丁不四见对方人多，突然灵机一动，道：“好，一言为定，咱们大家都不出手。你们这边是石庄主夫妇，他们这边是母子二人。双方各是一男一女，大家见个胜败便是。”他和石破天动过几次手，知道这少年武功远在石清夫妇之上，有他相助，梅芳姑诀计不会落败。\n 这里写了丁不四的言语和心思，已经属于详写了。\n武侠小说中的详写与略写，必须间隔起来，这样读起来才不容易觉得疲倦。人们常说读金庸小说不觉得累，如果没有生理限制，可以一直读下去。写作常言技巧“文似看山不喜平”，便可以从文字的疏与密上理解。\n国画中的写意与写实 #  下面看国画中的写意。什么是写意？说白了就是「疏」，就是「略」，就是抽象。这是一张齐白石的草虫国画：\n \n这里萝卜画得简略，虫子画得精细。是齐白石大师画不精细吗？显然不是，齐白石年少学做木匠，中年又学刻印，手上功夫是很有准头的。这不是工笔画，不用写实，这是写意画。但即使在写意画当中，齐白石对画中事物也分了疏密，倘若萝卜和虫子一昧画得工笔细致，或一昧画得粗糙简略，便失去国画的意味了。你可以网上随意找一下，齐白石的画，画的风格总是疏密有致的，没有一边倒的情况。\n所以，现在我讲明白了吗？小说文字的疏与密，国画中的写意与写实，它们是一回事，源自同一种中国文化，往更高的层次说是同样的一种艺术处理技巧。\n小结 #  最后总结一下我的感受。武侠小说中，无论是将多人言行、心思并作一类抽象的人「疏」写，还是将要写的内容作抽象概括，像故事大纲一样一笔带过，以及用简短有力的句子，将一句话中的主语或谓语省略掉，这一切都是为（小说要讲的）故事服务的。\n为了讲好故事，有些话可以略写，甚至不写。这种错落有致的写法，才让读者觉得小说的「节奏」快。其实「节奏」只是一个读者主观的阅读体验罢了，加快叙事进度，不说多余的话，快点把故事讲完，在读者这边的感受结果就是三个字——节奏快。\n反过来，如何小说通篇内容都是情节大纲式的略写，抑或是事无巨细式的详写，读者的阅读感受要么是索然无味，要么是审美疲劳，读个几章内容就读下去了，这种情况在网文小说中很常见。有人说现在网文节奏变快了，金庸小说过时了。其实不是的，很多网文作者都没有什么写作经验，靠在小说中塞几个黄段子飞起，仅是金庸武侠小说中疏与密这一个技巧，就值得他们好好学习。\n2022年9月8日于北京\n"},{"id":4,"href":"/posts/2022/0906.html","title":"Github Gist是什么？","section":"Posts","content":"Github Gist是什么？ #  Gist（https://gist.github.com/），中文要点，/dʒɪst/，是Github提供的一个子服务，可以在线分享比较小的代码片段，同样的代码如果用传统创建仓库的方式分享可能就显得笨重了。Gist就是一个精简版的Repository。下面是我用《微信小游戏开发》3.2.2示例代码做的实验，及实验感受。\n它分享的范围有哪些？ #  创建时有两个选项：\n第一个选项“Create secret gist”，虽然有 secret，但也不是私密的，看到分享链接的人都可以访问。第二个选项，是一个完全公开的、搜索引擎可以抓取的链接。\n基本公司团队内分享，使用第一个选项合适；撰写一个小教程，就像我这篇文章一样，适合使用第二个选项。这个选项或许还可以让我们的文章有更多的曝光量，当然这仅限于你在代码中可以留下了文章链接。\n它有什么用法？ #  在线创建后便可以分享了。\n在页面中内嵌代码 #  直接在 md 或 HTML 页面中，用 script 标签嵌入一个 js 地址：\n1\u0026lt;script src=\u0026#34;https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 下面 Gist 嵌入开始：\n 嵌入结束，效果如上所示。\n它是怎么工作的？这个很容易猜出。\njs 文件链接本身即包含了足够的信息，它会先动态加载基本的类库，然后再把要加载的对象信息传递给类库，对象（我们分享的代码）加载完成之后，最后统一在页面上创建 HTML 元素并把代码渲染出来。\n如果查看上述 8829.js 文件的代码，它的内容类似是这样的：\n1document.write(\u0026#39;\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://github.githubassets.com/assets/gist-embed-19d8e57711b3.css\u0026#34;\u0026gt;\u0026#39;) 2document.write(\u0026#39;\u0026lt;div id=\\\u0026#34;gist118190366\\\u0026#34; class=\\\u0026#34;gist\\\u0026#34;\u0026gt;\\n \u0026lt;div class=\\\u0026#34;gist-file\\\u0026#34; translate=\\\u0026#34;no\\\u0026#34;\u0026gt;\\n...\u0026#39;) 第一行是 Github 基本的CSS样式类库，第二行是与我们每一个分享的代码有关的信息。\n分享链接 #   https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829\n注意，这个地址很奇妙啊，这不就是上面那个js文件的地址吗？只是少了一个js后缀。在Github的服务器端，加上后缀是被引入的js文件，不加是Gist代码的主页地址，这样的API设计不可谓不算简约。\n提供一个 zip 下载链接 #   https://gist.github.com/rixingyike/3e64127a5ebb66ee381093bfeeed8829/archive/9b29a41650efa5bd9884d27ba9cb617e0291f8e1.zip\n对于自己已经创建的历史 Gist，Github 都有记录，这个地址就是 Gist 地址加上自己的 Github ID，例如我的 Gists 地址是：\n https://gist.github.com/rixingyike\nGist 不能在线直接运行吗？ #  目前不能。\nGist 允许同时分享多个文件，我在使用时看到这个功能还很高兴，因为可以保持文件的名称和相对位置，对于前端小示例，便意味着可以在线运行。\n事实上不可以。\n事实上 HTML/CSS/JS 组成的静态示例，是可以实现在线运行的。\n对于看到分享链接的读者来说，不仅能看到代码，还能看到运行效果。甚至其他语言，例如 Python、Go 等，借助 WebAssembly 技术，也可以实现在线查看源码与运行效果。\n虽然 Gist 官方不能，但有人开发了第三方应用，可以动态加载 Gist 并呈现动态效果，例如：\n https://bl.ocks.org/\n使用方法也很简单，直接将上面自己的分享链接中的 gist.github.com，替换为 bl.ocks.org 即可。例如我的这个小示例微信小游戏开发 3.2.2，在线查看地址为：\n https://bl.ocks.org/rixingyike/3e64127a5ebb66ee381093bfeeed8829\n运行效果为：\n \n它已然是一个「活」的 HTML 页面了。但它在这里只是一张图片，那么这个示例效果页也可以嵌入吗？\n的md文件内应该是可以的，因为md支持HTML代码嘛。嵌入效果如下：\n 嵌入结束。\n没有效果！没有办法，资源是bl.ocks.org的，人家拒绝我们跨域嵌入，我们便无法通过iframe引入了。\n其他问题 #  gist.github.com 被墙无法访问的解决办法 #  可以用梯子，或者修改 hosts 文件，直接将 gist.github.com 指向它的 IP 地址（例如 192.30.253.118），这一招破解的是 DNS 污染。\n具体指向哪里，不一定，可以在本地用 ping 指令查看一下。希望你的 ping 结果不是这样的：\n0 received, 100% packet loss\n有人把 Gist 当作一个写作平台 #  这件事是结合http://roughdraft.io来做的，但其实没有必要啊。Github仓库+hugo+Github Actions 就可以构建一个完美的静态博客，没有必要用结构松散的 Gist。\n如何看待 Github Gist 这个服务，怎样更好地利用？ #  就是一个阉割版的 Repository，便于在线分享内容，不局限于分享代码。正常使用就可以了，过度使用就没有必要了。\nHow to create a GitHub Gist with API? #  先创建 Github Token，然后在下面这个网址：\n https://docs.github.com/cn/rest/gists/gists\n找到需要的 REST API，进行 Gist 的 CURD 操作就可以了。\n小结 #  当然了，Gist 本质上最大的功能，还是内嵌代码，且天然支持高亮，效果如下所示。\n \n身为程序员，没有用过 Gist 或不能用 Gist，感觉像吃手把肉没有韭菜花一样，多少有点不完美。 "},{"id":5,"href":"/guestbook.html","title":"Guestbook","section":"Hi","content":"Guestbook #  在下方评论区留言。\n"},{"id":6,"href":"/about.html","title":"关于作者","section":"Hi","content":"关于作者 #  李艺， 腾讯云最具价值专家（TVP），微信学堂 《小程序性能优化实践》讲师，极客时间 《微信小程序全栈开发实战》讲师，一汽大众等企业内训讲师，《小程序从0到1》《微信小游戏开发》等图书作者。视频号/公共号「艺述论」作者。\n学编程就像登山，一步一个台阶，没有人学不会。\n联系方式 #   QQ：9830131 Weixin：同上 Email：9830131#qq.com  当您添加别人的微信时，如果您没有写明备注，我想您也不会介意对方拒绝。\n赞赏 #  如果觉得这个博客对你有帮助，欢迎扫码打赏博主。\n支付宝 微信 PayPal PayPal.Me/coderliyi "},{"id":7,"href":"/categories.html","title":"Categories","section":"Hi","content":"Categories #  "},{"id":8,"href":"/tags.html","title":"Tags","section":"Hi","content":"Tags #  "}]